# @genqlient(for: "GitAutomationState.state", pointer: true)
# @genqlient(for: "GitAutomationState.targetBranch", pointer: true)
fragment TeamWorkflow on Team {
  id
  key
  gitAutomationStates {
    nodes {
      id
      state {
        id
      }
      event
      targetBranch {
        id
        branchPattern
        isRegex
      }
    }
  }
}

query getTeamWorkflow($key: String!) {
  team(id: $key) {
    ...TeamWorkflow
  }
}

# @genqlient(for: "GitAutomationStateCreateInput.id", omitempty: true, pointer: true)
# @genqlient(for: "GitAutomationStateCreateInput.stateId", pointer: true)
# @genqlient(for: "GitAutomationStateCreateInput.targetBranchId", pointer: true)
mutation createGitAutomationState(
  $input: GitAutomationStateCreateInput!
) {
  gitAutomationStateCreate(input: $input) {
    success
  }
}

# @genqlient(for: "GitAutomationStateUpdateInput.stateId", pointer: true)
# @genqlient(for: "GitAutomationStateUpdateInput.targetBranchId", pointer: true)
mutation updateGitAutomationState(
  $id: String!
  $input: GitAutomationStateUpdateInput!
) {
  gitAutomationStateUpdate(id: $id, input: $input) {
    success
  }
}

mutation deleteGitAutomationState($id: String!) {
  gitAutomationStateDelete(id: $id) {
    success
  }
}

# @genqlient(for: "GitAutomationTargetBranchCreateInput.id", omitempty: true, pointer: true)
mutation createGitAutomationTargetBranch(
  $input: GitAutomationTargetBranchCreateInput!
) {
  gitAutomationTargetBranchCreate(input: $input) {
    targetBranch {
      id
      branchPattern
      isRegex
    }
    success
  }
}

mutation deleteGitAutomationTargetBranch($id: String!) {
  gitAutomationTargetBranchDelete(id: $id) {
    success
  }
}