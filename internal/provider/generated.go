// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// The day of the week.
type Day string

const (
	DaySunday    Day = "Sunday"
	DayMonday    Day = "Monday"
	DayTuesday   Day = "Tuesday"
	DayWednesday Day = "Wednesday"
	DayThursday  Day = "Thursday"
	DayFriday    Day = "Friday"
	DaySaturday  Day = "Saturday"
)

// Cadence to generate feed summary
type FeedSummarySchedule string

const (
	FeedSummaryScheduleDaily  FeedSummarySchedule = "daily"
	FeedSummaryScheduleWeekly FeedSummarySchedule = "weekly"
	FeedSummaryScheduleNever  FeedSummarySchedule = "never"
)

type GitAutomationStateCreateInput struct {
	// The identifier in UUID v4 format. If none is provided, the backend will generate one.
	Id *string `json:"id,omitempty"`
	// The team associated with the automation state.
	TeamId string `json:"teamId"`
	// The associated workflow state. If null, will override default behaviour and take no action.
	StateId *string `json:"stateId"`
	// The associated target branch. If null, all branches are targeted.
	TargetBranchId *string `json:"targetBranchId"`
	// The event that triggers the automation.
	Event GitAutomationStates `json:"event"`
}

// GetId returns GitAutomationStateCreateInput.Id, and is useful for accessing the field via an interface.
func (v *GitAutomationStateCreateInput) GetId() *string { return v.Id }

// GetTeamId returns GitAutomationStateCreateInput.TeamId, and is useful for accessing the field via an interface.
func (v *GitAutomationStateCreateInput) GetTeamId() string { return v.TeamId }

// GetStateId returns GitAutomationStateCreateInput.StateId, and is useful for accessing the field via an interface.
func (v *GitAutomationStateCreateInput) GetStateId() *string { return v.StateId }

// GetTargetBranchId returns GitAutomationStateCreateInput.TargetBranchId, and is useful for accessing the field via an interface.
func (v *GitAutomationStateCreateInput) GetTargetBranchId() *string { return v.TargetBranchId }

// GetEvent returns GitAutomationStateCreateInput.Event, and is useful for accessing the field via an interface.
func (v *GitAutomationStateCreateInput) GetEvent() GitAutomationStates { return v.Event }

type GitAutomationStateUpdateInput struct {
	// The associated workflow state.
	StateId *string `json:"stateId"`
	// The associated target branch. If null, all branches are targeted.
	TargetBranchId *string `json:"targetBranchId"`
	// The event that triggers the automation.
	Event GitAutomationStates `json:"event"`
}

// GetStateId returns GitAutomationStateUpdateInput.StateId, and is useful for accessing the field via an interface.
func (v *GitAutomationStateUpdateInput) GetStateId() *string { return v.StateId }

// GetTargetBranchId returns GitAutomationStateUpdateInput.TargetBranchId, and is useful for accessing the field via an interface.
func (v *GitAutomationStateUpdateInput) GetTargetBranchId() *string { return v.TargetBranchId }

// GetEvent returns GitAutomationStateUpdateInput.Event, and is useful for accessing the field via an interface.
func (v *GitAutomationStateUpdateInput) GetEvent() GitAutomationStates { return v.Event }

// The various states of a pull/merge request.
type GitAutomationStates string

const (
	GitAutomationStatesDraft     GitAutomationStates = "draft"
	GitAutomationStatesStart     GitAutomationStates = "start"
	GitAutomationStatesReview    GitAutomationStates = "review"
	GitAutomationStatesMergeable GitAutomationStates = "mergeable"
	GitAutomationStatesMerge     GitAutomationStates = "merge"
)

// IssueLabel includes the GraphQL fields of IssueLabel requested by the fragment IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type IssueLabel struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The label's name.
	Name string `json:"name"`
	// The label's description.
	Description *string `json:"description"`
	// The label's color as a HEX string.
	Color *string `json:"color"`
	// The parent label.
	Parent *IssueLabelParentIssueLabel `json:"parent"`
	// The team that the label is associated with. If null, the label is associated with the global workspace.
	Team *IssueLabelTeam `json:"team"`
}

// GetId returns IssueLabel.Id, and is useful for accessing the field via an interface.
func (v *IssueLabel) GetId() string { return v.Id }

// GetName returns IssueLabel.Name, and is useful for accessing the field via an interface.
func (v *IssueLabel) GetName() string { return v.Name }

// GetDescription returns IssueLabel.Description, and is useful for accessing the field via an interface.
func (v *IssueLabel) GetDescription() *string { return v.Description }

// GetColor returns IssueLabel.Color, and is useful for accessing the field via an interface.
func (v *IssueLabel) GetColor() *string { return v.Color }

// GetParent returns IssueLabel.Parent, and is useful for accessing the field via an interface.
func (v *IssueLabel) GetParent() *IssueLabelParentIssueLabel { return v.Parent }

// GetTeam returns IssueLabel.Team, and is useful for accessing the field via an interface.
func (v *IssueLabel) GetTeam() *IssueLabelTeam { return v.Team }

type IssueLabelCreateInput struct {
	// The identifier in UUID v4 format. If none is provided, the backend will generate one.
	Id string `json:"id,omitempty"`
	// The name of the label.
	Name string `json:"name"`
	// The description of the label.
	Description *string `json:"description"`
	// The color of the label.
	Color *string `json:"color,omitempty"`
	// The identifier of the parent label.
	ParentId *string `json:"parentId"`
	// The team associated with the label. If not given, the label will be associated with the entire workspace.
	TeamId *string `json:"teamId"`
	// Whether the label is a group.
	IsGroup bool `json:"isGroup"`
}

// GetId returns IssueLabelCreateInput.Id, and is useful for accessing the field via an interface.
func (v *IssueLabelCreateInput) GetId() string { return v.Id }

// GetName returns IssueLabelCreateInput.Name, and is useful for accessing the field via an interface.
func (v *IssueLabelCreateInput) GetName() string { return v.Name }

// GetDescription returns IssueLabelCreateInput.Description, and is useful for accessing the field via an interface.
func (v *IssueLabelCreateInput) GetDescription() *string { return v.Description }

// GetColor returns IssueLabelCreateInput.Color, and is useful for accessing the field via an interface.
func (v *IssueLabelCreateInput) GetColor() *string { return v.Color }

// GetParentId returns IssueLabelCreateInput.ParentId, and is useful for accessing the field via an interface.
func (v *IssueLabelCreateInput) GetParentId() *string { return v.ParentId }

// GetTeamId returns IssueLabelCreateInput.TeamId, and is useful for accessing the field via an interface.
func (v *IssueLabelCreateInput) GetTeamId() *string { return v.TeamId }

// GetIsGroup returns IssueLabelCreateInput.IsGroup, and is useful for accessing the field via an interface.
func (v *IssueLabelCreateInput) GetIsGroup() bool { return v.IsGroup }

// IssueLabelParentIssueLabel includes the requested fields of the GraphQL type IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type IssueLabelParentIssueLabel struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns IssueLabelParentIssueLabel.Id, and is useful for accessing the field via an interface.
func (v *IssueLabelParentIssueLabel) GetId() string { return v.Id }

// IssueLabelTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type IssueLabelTeam struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns IssueLabelTeam.Id, and is useful for accessing the field via an interface.
func (v *IssueLabelTeam) GetId() string { return v.Id }

type IssueLabelUpdateInput struct {
	// The name of the label.
	Name string `json:"name,omitempty"`
	// The description of the label.
	Description *string `json:"description"`
	// The identifier of the parent label.
	ParentId *string `json:"parentId"`
	// The color of the label.
	Color *string `json:"color,omitempty"`
}

// GetName returns IssueLabelUpdateInput.Name, and is useful for accessing the field via an interface.
func (v *IssueLabelUpdateInput) GetName() string { return v.Name }

// GetDescription returns IssueLabelUpdateInput.Description, and is useful for accessing the field via an interface.
func (v *IssueLabelUpdateInput) GetDescription() *string { return v.Description }

// GetParentId returns IssueLabelUpdateInput.ParentId, and is useful for accessing the field via an interface.
func (v *IssueLabelUpdateInput) GetParentId() *string { return v.ParentId }

// GetColor returns IssueLabelUpdateInput.Color, and is useful for accessing the field via an interface.
func (v *IssueLabelUpdateInput) GetColor() *string { return v.Color }

// Organization includes the GraphQL fields of Organization requested by the fragment Organization.
// The GraphQL type's documentation follows.
//
// An organization. Organizations are root-level objects that contain user accounts and teams.
type Organization struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// Whether member users are allowed to send invites.
	AllowMembersToInvite bool `json:"allowMembersToInvite"`
	// Whether the organization is using a roadmap.
	RoadmapEnabled bool `json:"roadmapEnabled"`
	// Whether the Git integration linkback messages should be sent to private repositories.
	GitLinkbackMessagesEnabled bool `json:"gitLinkbackMessagesEnabled"`
	// Whether the Git integration linkback messages should be sent to public repositories.
	GitPublicLinkbackMessagesEnabled bool `json:"gitPublicLinkbackMessagesEnabled"`
}

// GetId returns Organization.Id, and is useful for accessing the field via an interface.
func (v *Organization) GetId() string { return v.Id }

// GetAllowMembersToInvite returns Organization.AllowMembersToInvite, and is useful for accessing the field via an interface.
func (v *Organization) GetAllowMembersToInvite() bool { return v.AllowMembersToInvite }

// GetRoadmapEnabled returns Organization.RoadmapEnabled, and is useful for accessing the field via an interface.
func (v *Organization) GetRoadmapEnabled() bool { return v.RoadmapEnabled }

// GetGitLinkbackMessagesEnabled returns Organization.GitLinkbackMessagesEnabled, and is useful for accessing the field via an interface.
func (v *Organization) GetGitLinkbackMessagesEnabled() bool { return v.GitLinkbackMessagesEnabled }

// GetGitPublicLinkbackMessagesEnabled returns Organization.GitPublicLinkbackMessagesEnabled, and is useful for accessing the field via an interface.
func (v *Organization) GetGitPublicLinkbackMessagesEnabled() bool {
	return v.GitPublicLinkbackMessagesEnabled
}

// [INTERNAL] Organization IP restriction configuration.
type OrganizationIpRestrictionInput struct {
	// IP range in CIDR format.
	Range string `json:"range"`
	// Restriction type.
	Type string `json:"type"`
	// Optional restriction description.
	Description string `json:"description"`
	// Whether the restriction is enabled.
	Enabled bool `json:"enabled"`
}

// GetRange returns OrganizationIpRestrictionInput.Range, and is useful for accessing the field via an interface.
func (v *OrganizationIpRestrictionInput) GetRange() string { return v.Range }

// GetType returns OrganizationIpRestrictionInput.Type, and is useful for accessing the field via an interface.
func (v *OrganizationIpRestrictionInput) GetType() string { return v.Type }

// GetDescription returns OrganizationIpRestrictionInput.Description, and is useful for accessing the field via an interface.
func (v *OrganizationIpRestrictionInput) GetDescription() string { return v.Description }

// GetEnabled returns OrganizationIpRestrictionInput.Enabled, and is useful for accessing the field via an interface.
func (v *OrganizationIpRestrictionInput) GetEnabled() bool { return v.Enabled }

type OrganizationUpdateInput struct {
	// The name of the organization.
	Name string `json:"name,omitempty"`
	// The logo of the organization.
	LogoUrl string `json:"logoUrl,omitempty"`
	// The URL key of the organization.
	UrlKey string `json:"urlKey,omitempty"`
	// How git branches are formatted. If null, default formatting will be used.
	GitBranchFormat string `json:"gitBranchFormat,omitempty"`
	// Whether the Git integration linkback messages should be sent for private repositories.
	GitLinkbackMessagesEnabled bool `json:"gitLinkbackMessagesEnabled"`
	// Whether the Git integration linkback messages should be sent for public repositories.
	GitPublicLinkbackMessagesEnabled bool `json:"gitPublicLinkbackMessagesEnabled"`
	// Whether the organization is using roadmap.
	RoadmapEnabled bool `json:"roadmapEnabled"`
	// The n-weekly frequency at which to prompt for project updates.
	ProjectUpdateReminderFrequencyInWeeks float64 `json:"projectUpdateReminderFrequencyInWeeks,omitempty"`
	// The day at which project updates are sent.
	ProjectUpdateRemindersDay Day `json:"projectUpdateRemindersDay,omitempty"`
	// The hour at which project updates are sent.
	ProjectUpdateRemindersHour float64 `json:"projectUpdateRemindersHour,omitempty"`
	// [ALPHA] The n-weekly frequency at which to prompt for initiative updates.
	InitiativeUpdateReminderFrequencyInWeeks float64 `json:"initiativeUpdateReminderFrequencyInWeeks,omitempty"`
	// [ALPHA] The day at which initiative updates are sent.
	InitiativeUpdateRemindersDay Day `json:"initiativeUpdateRemindersDay,omitempty"`
	// [ALPHA] The hour at which initiative updates are sent.
	InitiativeUpdateRemindersHour float64 `json:"initiativeUpdateRemindersHour,omitempty"`
	// The month at which the fiscal year starts.
	FiscalYearStartMonth float64 `json:"fiscalYearStartMonth,omitempty"`
	// [Internal] The list of working days. Sunday is 0, Monday is 1, etc.
	WorkingDays []float64 `json:"workingDays,omitempty"`
	// Whether the organization has opted for reduced customer support attachment information.
	ReducedPersonalInformation bool `json:"reducedPersonalInformation,omitempty"`
	// Whether the organization has opted for having to approve all OAuth applications for install.
	OauthAppReview bool `json:"oauthAppReview,omitempty"`
	// List of services that are allowed to be used for login.
	AllowedAuthServices []string `json:"allowedAuthServices,omitempty"`
	// Internal. Whether SLAs have been enabled for the organization.
	SlaEnabled bool `json:"slaEnabled,omitempty"`
	// Whether member users are allowed to send invites.
	AllowMembersToInvite bool `json:"allowMembersToInvite"`
	// Whether team creation is restricted to admins.
	RestrictTeamCreationToAdmins bool `json:"restrictTeamCreationToAdmins"`
	// Whether label creation is restricted to admins.
	RestrictLabelManagementToAdmins bool `json:"restrictLabelManagementToAdmins"`
	// Whether agent invocation is restricted to full workspace members.
	RestrictAgentInvocationToMembers bool `json:"restrictAgentInvocationToMembers"`
	// IP restriction configurations controlling allowed access the workspace.
	IpRestrictions []OrganizationIpRestrictionInput `json:"ipRestrictions,omitempty"`
	// [ALPHA] Theme settings for the organization.
	ThemeSettings map[string]interface{} `json:"themeSettings,omitempty"`
	// [INTERNAL] Whether the organization is using customers.
	CustomersEnabled bool `json:"customersEnabled"`
	// [INTERNAL] Configuration settings for the Customers feature.
	CustomersConfiguration map[string]interface{} `json:"customersConfiguration,omitempty"`
	// Whether the organization has enabled the feed feature.
	FeedEnabled bool `json:"feedEnabled"`
	// Default schedule for how often feed summaries are generated.
	DefaultFeedSummarySchedule FeedSummarySchedule `json:"defaultFeedSummarySchedule,omitempty"`
	// [INTERNAL] Whether the organization has enabled the AI add-on.
	AiAddonEnabled bool `json:"aiAddonEnabled,omitempty"`
	// [INTERNAL] Whether the organization has opted in to AI telemetry.
	AiTelemetryEnabled bool `json:"aiTelemetryEnabled"`
	// [INTERNAL] Whether the organization has enabled the member API keys.
	PersonalApiKeysEnabled bool `json:"personalApiKeysEnabled,omitempty"`
}

// GetName returns OrganizationUpdateInput.Name, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetName() string { return v.Name }

// GetLogoUrl returns OrganizationUpdateInput.LogoUrl, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetLogoUrl() string { return v.LogoUrl }

// GetUrlKey returns OrganizationUpdateInput.UrlKey, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetUrlKey() string { return v.UrlKey }

// GetGitBranchFormat returns OrganizationUpdateInput.GitBranchFormat, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetGitBranchFormat() string { return v.GitBranchFormat }

// GetGitLinkbackMessagesEnabled returns OrganizationUpdateInput.GitLinkbackMessagesEnabled, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetGitLinkbackMessagesEnabled() bool {
	return v.GitLinkbackMessagesEnabled
}

// GetGitPublicLinkbackMessagesEnabled returns OrganizationUpdateInput.GitPublicLinkbackMessagesEnabled, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetGitPublicLinkbackMessagesEnabled() bool {
	return v.GitPublicLinkbackMessagesEnabled
}

// GetRoadmapEnabled returns OrganizationUpdateInput.RoadmapEnabled, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetRoadmapEnabled() bool { return v.RoadmapEnabled }

// GetProjectUpdateReminderFrequencyInWeeks returns OrganizationUpdateInput.ProjectUpdateReminderFrequencyInWeeks, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetProjectUpdateReminderFrequencyInWeeks() float64 {
	return v.ProjectUpdateReminderFrequencyInWeeks
}

// GetProjectUpdateRemindersDay returns OrganizationUpdateInput.ProjectUpdateRemindersDay, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetProjectUpdateRemindersDay() Day {
	return v.ProjectUpdateRemindersDay
}

// GetProjectUpdateRemindersHour returns OrganizationUpdateInput.ProjectUpdateRemindersHour, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetProjectUpdateRemindersHour() float64 {
	return v.ProjectUpdateRemindersHour
}

// GetInitiativeUpdateReminderFrequencyInWeeks returns OrganizationUpdateInput.InitiativeUpdateReminderFrequencyInWeeks, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetInitiativeUpdateReminderFrequencyInWeeks() float64 {
	return v.InitiativeUpdateReminderFrequencyInWeeks
}

// GetInitiativeUpdateRemindersDay returns OrganizationUpdateInput.InitiativeUpdateRemindersDay, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetInitiativeUpdateRemindersDay() Day {
	return v.InitiativeUpdateRemindersDay
}

// GetInitiativeUpdateRemindersHour returns OrganizationUpdateInput.InitiativeUpdateRemindersHour, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetInitiativeUpdateRemindersHour() float64 {
	return v.InitiativeUpdateRemindersHour
}

// GetFiscalYearStartMonth returns OrganizationUpdateInput.FiscalYearStartMonth, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetFiscalYearStartMonth() float64 { return v.FiscalYearStartMonth }

// GetWorkingDays returns OrganizationUpdateInput.WorkingDays, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetWorkingDays() []float64 { return v.WorkingDays }

// GetReducedPersonalInformation returns OrganizationUpdateInput.ReducedPersonalInformation, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetReducedPersonalInformation() bool {
	return v.ReducedPersonalInformation
}

// GetOauthAppReview returns OrganizationUpdateInput.OauthAppReview, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetOauthAppReview() bool { return v.OauthAppReview }

// GetAllowedAuthServices returns OrganizationUpdateInput.AllowedAuthServices, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetAllowedAuthServices() []string { return v.AllowedAuthServices }

// GetSlaEnabled returns OrganizationUpdateInput.SlaEnabled, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetSlaEnabled() bool { return v.SlaEnabled }

// GetAllowMembersToInvite returns OrganizationUpdateInput.AllowMembersToInvite, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetAllowMembersToInvite() bool { return v.AllowMembersToInvite }

// GetRestrictTeamCreationToAdmins returns OrganizationUpdateInput.RestrictTeamCreationToAdmins, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetRestrictTeamCreationToAdmins() bool {
	return v.RestrictTeamCreationToAdmins
}

// GetRestrictLabelManagementToAdmins returns OrganizationUpdateInput.RestrictLabelManagementToAdmins, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetRestrictLabelManagementToAdmins() bool {
	return v.RestrictLabelManagementToAdmins
}

// GetRestrictAgentInvocationToMembers returns OrganizationUpdateInput.RestrictAgentInvocationToMembers, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetRestrictAgentInvocationToMembers() bool {
	return v.RestrictAgentInvocationToMembers
}

// GetIpRestrictions returns OrganizationUpdateInput.IpRestrictions, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetIpRestrictions() []OrganizationIpRestrictionInput {
	return v.IpRestrictions
}

// GetThemeSettings returns OrganizationUpdateInput.ThemeSettings, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetThemeSettings() map[string]interface{} { return v.ThemeSettings }

// GetCustomersEnabled returns OrganizationUpdateInput.CustomersEnabled, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetCustomersEnabled() bool { return v.CustomersEnabled }

// GetCustomersConfiguration returns OrganizationUpdateInput.CustomersConfiguration, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetCustomersConfiguration() map[string]interface{} {
	return v.CustomersConfiguration
}

// GetFeedEnabled returns OrganizationUpdateInput.FeedEnabled, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetFeedEnabled() bool { return v.FeedEnabled }

// GetDefaultFeedSummarySchedule returns OrganizationUpdateInput.DefaultFeedSummarySchedule, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetDefaultFeedSummarySchedule() FeedSummarySchedule {
	return v.DefaultFeedSummarySchedule
}

// GetAiAddonEnabled returns OrganizationUpdateInput.AiAddonEnabled, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetAiAddonEnabled() bool { return v.AiAddonEnabled }

// GetAiTelemetryEnabled returns OrganizationUpdateInput.AiTelemetryEnabled, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetAiTelemetryEnabled() bool { return v.AiTelemetryEnabled }

// GetPersonalApiKeysEnabled returns OrganizationUpdateInput.PersonalApiKeysEnabled, and is useful for accessing the field via an interface.
func (v *OrganizationUpdateInput) GetPersonalApiKeysEnabled() bool { return v.PersonalApiKeysEnabled }

// [Internal] The scope of product intelligence suggestion data for a team.
type ProductIntelligenceScope string

const (
	ProductIntelligenceScopeWorkspace     ProductIntelligenceScope = "workspace"
	ProductIntelligenceScopeTeamhierarchy ProductIntelligenceScope = "teamHierarchy"
	ProductIntelligenceScopeTeam          ProductIntelligenceScope = "team"
	ProductIntelligenceScopeNone          ProductIntelligenceScope = "none"
)

// Team includes the GraphQL fields of Team requested by the fragment Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type Team struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The team's name.
	Name string `json:"name"`
	// The team's unique key. The key is used in URLs.
	Key string `json:"key"`
	// Whether the team is private or not.
	Private bool `json:"private"`
	// The team's description.
	Description *string `json:"description"`
	// The icon of the team.
	Icon *string `json:"icon"`
	// The team's color.
	Color *string `json:"color"`
	// The timezone of the team. Defaults to "America/Los_Angeles"
	Timezone string `json:"timezone"`
	// Whether to group recent issue history entries.
	GroupIssueHistory bool `json:"groupIssueHistory"`
	// Where to move issues when changing state.
	SetIssueSortOrderOnStateChange string `json:"setIssueSortOrderOnStateChange"`
	// Period after which automatically closed and completed issues are automatically archived in months.
	AutoArchivePeriod float64 `json:"autoArchivePeriod"`
	// Period after which issues are automatically closed in months. Null/undefined means disabled.
	AutoClosePeriod *float64 `json:"autoClosePeriod"`
	// Whether triage mode is enabled for the team or not.
	TriageEnabled bool `json:"triageEnabled"`
	// Whether an issue needs to have a priority set before leaving triage.
	RequirePriorityToLeaveTriage bool `json:"requirePriorityToLeaveTriage"`
	// Whether the team uses cycles.
	CyclesEnabled bool `json:"cyclesEnabled"`
	// The day of the week that a new cycle starts.
	CycleStartDay float64 `json:"cycleStartDay"`
	// The duration of a cycle in weeks.
	CycleDuration float64 `json:"cycleDuration"`
	// The cooldown time after each cycle in weeks.
	CycleCooldownTime float64 `json:"cycleCooldownTime"`
	// How many upcoming cycles to create.
	UpcomingCycleCount float64 `json:"upcomingCycleCount"`
	// Auto assign started issues to current cycle.
	CycleIssueAutoAssignStarted bool `json:"cycleIssueAutoAssignStarted"`
	// Auto assign completed issues to current cycle.
	CycleIssueAutoAssignCompleted bool `json:"cycleIssueAutoAssignCompleted"`
	// Auto assign issues to current cycle if in active status.
	CycleLockToActive bool `json:"cycleLockToActive"`
	// The issue estimation type to use. Must be one of "notUsed", "exponential", "fibonacci", "linear", "tShirt".
	IssueEstimationType string `json:"issueEstimationType"`
	// Whether to allow zeros in issues estimates.
	IssueEstimationAllowZero bool `json:"issueEstimationAllowZero"`
	// Whether to add additional points to the estimate scale.
	IssueEstimationExtended bool `json:"issueEstimationExtended"`
	// What to use as a default estimate for unestimated issues.
	DefaultIssueEstimate float64 `json:"defaultIssueEstimate"`
	// Whether to enable resolved thread AI summaries.
	AiThreadSummariesEnabled bool `json:"aiThreadSummariesEnabled"`
}

// GetId returns Team.Id, and is useful for accessing the field via an interface.
func (v *Team) GetId() string { return v.Id }

// GetName returns Team.Name, and is useful for accessing the field via an interface.
func (v *Team) GetName() string { return v.Name }

// GetKey returns Team.Key, and is useful for accessing the field via an interface.
func (v *Team) GetKey() string { return v.Key }

// GetPrivate returns Team.Private, and is useful for accessing the field via an interface.
func (v *Team) GetPrivate() bool { return v.Private }

// GetDescription returns Team.Description, and is useful for accessing the field via an interface.
func (v *Team) GetDescription() *string { return v.Description }

// GetIcon returns Team.Icon, and is useful for accessing the field via an interface.
func (v *Team) GetIcon() *string { return v.Icon }

// GetColor returns Team.Color, and is useful for accessing the field via an interface.
func (v *Team) GetColor() *string { return v.Color }

// GetTimezone returns Team.Timezone, and is useful for accessing the field via an interface.
func (v *Team) GetTimezone() string { return v.Timezone }

// GetGroupIssueHistory returns Team.GroupIssueHistory, and is useful for accessing the field via an interface.
func (v *Team) GetGroupIssueHistory() bool { return v.GroupIssueHistory }

// GetSetIssueSortOrderOnStateChange returns Team.SetIssueSortOrderOnStateChange, and is useful for accessing the field via an interface.
func (v *Team) GetSetIssueSortOrderOnStateChange() string { return v.SetIssueSortOrderOnStateChange }

// GetAutoArchivePeriod returns Team.AutoArchivePeriod, and is useful for accessing the field via an interface.
func (v *Team) GetAutoArchivePeriod() float64 { return v.AutoArchivePeriod }

// GetAutoClosePeriod returns Team.AutoClosePeriod, and is useful for accessing the field via an interface.
func (v *Team) GetAutoClosePeriod() *float64 { return v.AutoClosePeriod }

// GetTriageEnabled returns Team.TriageEnabled, and is useful for accessing the field via an interface.
func (v *Team) GetTriageEnabled() bool { return v.TriageEnabled }

// GetRequirePriorityToLeaveTriage returns Team.RequirePriorityToLeaveTriage, and is useful for accessing the field via an interface.
func (v *Team) GetRequirePriorityToLeaveTriage() bool { return v.RequirePriorityToLeaveTriage }

// GetCyclesEnabled returns Team.CyclesEnabled, and is useful for accessing the field via an interface.
func (v *Team) GetCyclesEnabled() bool { return v.CyclesEnabled }

// GetCycleStartDay returns Team.CycleStartDay, and is useful for accessing the field via an interface.
func (v *Team) GetCycleStartDay() float64 { return v.CycleStartDay }

// GetCycleDuration returns Team.CycleDuration, and is useful for accessing the field via an interface.
func (v *Team) GetCycleDuration() float64 { return v.CycleDuration }

// GetCycleCooldownTime returns Team.CycleCooldownTime, and is useful for accessing the field via an interface.
func (v *Team) GetCycleCooldownTime() float64 { return v.CycleCooldownTime }

// GetUpcomingCycleCount returns Team.UpcomingCycleCount, and is useful for accessing the field via an interface.
func (v *Team) GetUpcomingCycleCount() float64 { return v.UpcomingCycleCount }

// GetCycleIssueAutoAssignStarted returns Team.CycleIssueAutoAssignStarted, and is useful for accessing the field via an interface.
func (v *Team) GetCycleIssueAutoAssignStarted() bool { return v.CycleIssueAutoAssignStarted }

// GetCycleIssueAutoAssignCompleted returns Team.CycleIssueAutoAssignCompleted, and is useful for accessing the field via an interface.
func (v *Team) GetCycleIssueAutoAssignCompleted() bool { return v.CycleIssueAutoAssignCompleted }

// GetCycleLockToActive returns Team.CycleLockToActive, and is useful for accessing the field via an interface.
func (v *Team) GetCycleLockToActive() bool { return v.CycleLockToActive }

// GetIssueEstimationType returns Team.IssueEstimationType, and is useful for accessing the field via an interface.
func (v *Team) GetIssueEstimationType() string { return v.IssueEstimationType }

// GetIssueEstimationAllowZero returns Team.IssueEstimationAllowZero, and is useful for accessing the field via an interface.
func (v *Team) GetIssueEstimationAllowZero() bool { return v.IssueEstimationAllowZero }

// GetIssueEstimationExtended returns Team.IssueEstimationExtended, and is useful for accessing the field via an interface.
func (v *Team) GetIssueEstimationExtended() bool { return v.IssueEstimationExtended }

// GetDefaultIssueEstimate returns Team.DefaultIssueEstimate, and is useful for accessing the field via an interface.
func (v *Team) GetDefaultIssueEstimate() float64 { return v.DefaultIssueEstimate }

// GetAiThreadSummariesEnabled returns Team.AiThreadSummariesEnabled, and is useful for accessing the field via an interface.
func (v *Team) GetAiThreadSummariesEnabled() bool { return v.AiThreadSummariesEnabled }

type TeamCreateInput struct {
	// The identifier in UUID v4 format. If none is provided, the backend will generate one.
	Id string `json:"id,omitempty"`
	// The name of the team.
	Name string `json:"name"`
	// The description of the team.
	Description *string `json:"description"`
	// The key of the team. If not given, the key will be generated based on the name of the team.
	Key string `json:"key"`
	// The icon of the team.
	Icon *string `json:"icon,omitempty"`
	// The color of the team.
	Color *string `json:"color,omitempty"`
	// Whether the team uses cycles.
	CyclesEnabled bool `json:"cyclesEnabled"`
	// The day of the week that a new cycle starts.
	CycleStartDay float64 `json:"cycleStartDay"`
	// The duration of each cycle in weeks.
	CycleDuration int `json:"cycleDuration"`
	// The cooldown time after each cycle in weeks.
	CycleCooldownTime int `json:"cycleCooldownTime"`
	// Auto assign started issues to current active cycle setting.
	CycleIssueAutoAssignStarted bool `json:"cycleIssueAutoAssignStarted"`
	// Auto assign completed issues to current active cycle setting.
	CycleIssueAutoAssignCompleted bool `json:"cycleIssueAutoAssignCompleted"`
	// Only allow issues issues with cycles in Active Issues.
	CycleLockToActive bool `json:"cycleLockToActive"`
	// How many upcoming cycles to create.
	UpcomingCycleCount float64 `json:"upcomingCycleCount"`
	// Whether triage mode is enabled for the team.
	TriageEnabled bool `json:"triageEnabled"`
	// Whether an issue needs to have a priority set before leaving triage.
	RequirePriorityToLeaveTriage bool `json:"requirePriorityToLeaveTriage"`
	// The timezone of the team.
	Timezone string `json:"timezone"`
	// Whether the team should inherit estimation settings from its parent. Only applies to sub-teams.
	InheritIssueEstimation bool `json:"inheritIssueEstimation"`
	// [Internal] Whether the team should inherit workflow statuses from its parent.
	InheritWorkflowStatuses bool `json:"inheritWorkflowStatuses"`
	// The issue estimation type to use. Must be one of "notUsed", "exponential", "fibonacci", "linear", "tShirt".
	IssueEstimationType string `json:"issueEstimationType"`
	// Whether to allow zeros in issues estimates.
	IssueEstimationAllowZero bool `json:"issueEstimationAllowZero"`
	// Whether to move issues to bottom of the column when changing state.
	SetIssueSortOrderOnStateChange string `json:"setIssueSortOrderOnStateChange"`
	// Whether to add additional points to the estimate scale.
	IssueEstimationExtended bool `json:"issueEstimationExtended"`
	// What to use as an default estimate for unestimated issues.
	DefaultIssueEstimate float64 `json:"defaultIssueEstimate"`
	// Whether to group recent issue history entries.
	GroupIssueHistory bool `json:"groupIssueHistory"`
	// The identifier of the default template for members of this team.
	DefaultTemplateForMembersId string `json:"defaultTemplateForMembersId,omitempty"`
	// The identifier of the default template for non-members of this team.
	DefaultTemplateForNonMembersId string `json:"defaultTemplateForNonMembersId,omitempty"`
	// The identifier of the default project template of this team.
	DefaultProjectTemplateId string `json:"defaultProjectTemplateId,omitempty"`
	// Internal. Whether the team is private or not.
	Private bool `json:"private"`
	// Period after which issues are automatically closed, in months.
	AutoClosePeriod *float64 `json:"autoClosePeriod"`
	// The canceled workflow state which auto closed issues will be set to.
	AutoCloseStateId string `json:"autoCloseStateId,omitempty"`
	// Period after which closed and completed issues are automatically archived, in months. 0 means disabled.
	AutoArchivePeriod float64 `json:"autoArchivePeriod"`
	// The workflow state into which issues are moved when they are marked as a duplicate of another issue.
	MarkedAsDuplicateWorkflowStateId string `json:"markedAsDuplicateWorkflowStateId,omitempty"`
	// The parent team ID.
	ParentId *string `json:"parentId,omitempty"`
	// [Internal] Whether the team should inherit its product intelligence scope from its parent. Only applies to sub-teams.
	InheritProductIntelligenceScope bool `json:"inheritProductIntelligenceScope"`
	// [Internal] The scope of product intelligence suggestion data for the team.
	ProductIntelligenceScope ProductIntelligenceScope `json:"productIntelligenceScope,omitempty"`
}

// GetId returns TeamCreateInput.Id, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetId() string { return v.Id }

// GetName returns TeamCreateInput.Name, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetName() string { return v.Name }

// GetDescription returns TeamCreateInput.Description, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetDescription() *string { return v.Description }

// GetKey returns TeamCreateInput.Key, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetKey() string { return v.Key }

// GetIcon returns TeamCreateInput.Icon, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetIcon() *string { return v.Icon }

// GetColor returns TeamCreateInput.Color, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetColor() *string { return v.Color }

// GetCyclesEnabled returns TeamCreateInput.CyclesEnabled, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetCyclesEnabled() bool { return v.CyclesEnabled }

// GetCycleStartDay returns TeamCreateInput.CycleStartDay, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetCycleStartDay() float64 { return v.CycleStartDay }

// GetCycleDuration returns TeamCreateInput.CycleDuration, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetCycleDuration() int { return v.CycleDuration }

// GetCycleCooldownTime returns TeamCreateInput.CycleCooldownTime, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetCycleCooldownTime() int { return v.CycleCooldownTime }

// GetCycleIssueAutoAssignStarted returns TeamCreateInput.CycleIssueAutoAssignStarted, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetCycleIssueAutoAssignStarted() bool { return v.CycleIssueAutoAssignStarted }

// GetCycleIssueAutoAssignCompleted returns TeamCreateInput.CycleIssueAutoAssignCompleted, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetCycleIssueAutoAssignCompleted() bool {
	return v.CycleIssueAutoAssignCompleted
}

// GetCycleLockToActive returns TeamCreateInput.CycleLockToActive, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetCycleLockToActive() bool { return v.CycleLockToActive }

// GetUpcomingCycleCount returns TeamCreateInput.UpcomingCycleCount, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetUpcomingCycleCount() float64 { return v.UpcomingCycleCount }

// GetTriageEnabled returns TeamCreateInput.TriageEnabled, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetTriageEnabled() bool { return v.TriageEnabled }

// GetRequirePriorityToLeaveTriage returns TeamCreateInput.RequirePriorityToLeaveTriage, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetRequirePriorityToLeaveTriage() bool {
	return v.RequirePriorityToLeaveTriage
}

// GetTimezone returns TeamCreateInput.Timezone, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetTimezone() string { return v.Timezone }

// GetInheritIssueEstimation returns TeamCreateInput.InheritIssueEstimation, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetInheritIssueEstimation() bool { return v.InheritIssueEstimation }

// GetInheritWorkflowStatuses returns TeamCreateInput.InheritWorkflowStatuses, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetInheritWorkflowStatuses() bool { return v.InheritWorkflowStatuses }

// GetIssueEstimationType returns TeamCreateInput.IssueEstimationType, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetIssueEstimationType() string { return v.IssueEstimationType }

// GetIssueEstimationAllowZero returns TeamCreateInput.IssueEstimationAllowZero, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetIssueEstimationAllowZero() bool { return v.IssueEstimationAllowZero }

// GetSetIssueSortOrderOnStateChange returns TeamCreateInput.SetIssueSortOrderOnStateChange, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetSetIssueSortOrderOnStateChange() string {
	return v.SetIssueSortOrderOnStateChange
}

// GetIssueEstimationExtended returns TeamCreateInput.IssueEstimationExtended, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetIssueEstimationExtended() bool { return v.IssueEstimationExtended }

// GetDefaultIssueEstimate returns TeamCreateInput.DefaultIssueEstimate, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetDefaultIssueEstimate() float64 { return v.DefaultIssueEstimate }

// GetGroupIssueHistory returns TeamCreateInput.GroupIssueHistory, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetGroupIssueHistory() bool { return v.GroupIssueHistory }

// GetDefaultTemplateForMembersId returns TeamCreateInput.DefaultTemplateForMembersId, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetDefaultTemplateForMembersId() string {
	return v.DefaultTemplateForMembersId
}

// GetDefaultTemplateForNonMembersId returns TeamCreateInput.DefaultTemplateForNonMembersId, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetDefaultTemplateForNonMembersId() string {
	return v.DefaultTemplateForNonMembersId
}

// GetDefaultProjectTemplateId returns TeamCreateInput.DefaultProjectTemplateId, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetDefaultProjectTemplateId() string { return v.DefaultProjectTemplateId }

// GetPrivate returns TeamCreateInput.Private, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetPrivate() bool { return v.Private }

// GetAutoClosePeriod returns TeamCreateInput.AutoClosePeriod, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetAutoClosePeriod() *float64 { return v.AutoClosePeriod }

// GetAutoCloseStateId returns TeamCreateInput.AutoCloseStateId, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetAutoCloseStateId() string { return v.AutoCloseStateId }

// GetAutoArchivePeriod returns TeamCreateInput.AutoArchivePeriod, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetAutoArchivePeriod() float64 { return v.AutoArchivePeriod }

// GetMarkedAsDuplicateWorkflowStateId returns TeamCreateInput.MarkedAsDuplicateWorkflowStateId, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetMarkedAsDuplicateWorkflowStateId() string {
	return v.MarkedAsDuplicateWorkflowStateId
}

// GetParentId returns TeamCreateInput.ParentId, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetParentId() *string { return v.ParentId }

// GetInheritProductIntelligenceScope returns TeamCreateInput.InheritProductIntelligenceScope, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetInheritProductIntelligenceScope() bool {
	return v.InheritProductIntelligenceScope
}

// GetProductIntelligenceScope returns TeamCreateInput.ProductIntelligenceScope, and is useful for accessing the field via an interface.
func (v *TeamCreateInput) GetProductIntelligenceScope() ProductIntelligenceScope {
	return v.ProductIntelligenceScope
}

type TeamUpdateInput struct {
	// The name of the team.
	Name string `json:"name,omitempty"`
	// The description of the team.
	Description *string `json:"description"`
	// The key of the team.
	Key string `json:"key,omitempty"`
	// The icon of the team.
	Icon *string `json:"icon,omitempty"`
	// The color of the team.
	Color *string `json:"color,omitempty"`
	// Whether the team uses cycles.
	CyclesEnabled bool `json:"cyclesEnabled"`
	// The day of the week that a new cycle starts.
	CycleStartDay float64 `json:"cycleStartDay"`
	// The duration of each cycle in weeks.
	CycleDuration int `json:"cycleDuration"`
	// The cooldown time after each cycle in weeks.
	CycleCooldownTime int `json:"cycleCooldownTime"`
	// Auto assign started issues to current active cycle setting.
	CycleIssueAutoAssignStarted bool `json:"cycleIssueAutoAssignStarted"`
	// Auto assign completed issues to current active cycle setting.
	CycleIssueAutoAssignCompleted bool `json:"cycleIssueAutoAssignCompleted"`
	// Only allow issues with cycles in Active Issues.
	CycleLockToActive bool `json:"cycleLockToActive"`
	// The date to begin cycles on.
	CycleEnabledStartDate *time.Time `json:"cycleEnabledStartDate,omitempty"`
	// How many upcoming cycles to create.
	UpcomingCycleCount float64 `json:"upcomingCycleCount"`
	// The timezone of the team.
	Timezone string `json:"timezone"`
	// Whether the team should inherit estimation settings from its parent. Only applies to sub-teams.
	InheritIssueEstimation bool `json:"inheritIssueEstimation"`
	// The issue estimation type to use. Must be one of "notUsed", "exponential", "fibonacci", "linear", "tShirt".
	IssueEstimationType string `json:"issueEstimationType"`
	// Whether to allow zeros in issues estimates.
	IssueEstimationAllowZero bool `json:"issueEstimationAllowZero"`
	// Whether to move issues to bottom of the column when changing state.
	SetIssueSortOrderOnStateChange string `json:"setIssueSortOrderOnStateChange"`
	// Whether to add additional points to the estimate scale.
	IssueEstimationExtended bool `json:"issueEstimationExtended"`
	// What to use as an default estimate for unestimated issues.
	DefaultIssueEstimate float64 `json:"defaultIssueEstimate"`
	// Whether to send new issue notifications to Slack.
	SlackNewIssue bool `json:"slackNewIssue"`
	// Whether to send new issue comment notifications to Slack.
	SlackIssueComments bool `json:"slackIssueComments"`
	// Whether to send issue status update notifications to Slack.
	SlackIssueStatuses bool `json:"slackIssueStatuses"`
	// Whether to group recent issue history entries.
	GroupIssueHistory bool `json:"groupIssueHistory"`
	// Whether to enable resolved thread AI summaries.
	AiThreadSummariesEnabled bool `json:"aiThreadSummariesEnabled"`
	// The identifier of the default template for members of this team.
	DefaultTemplateForMembersId string `json:"defaultTemplateForMembersId,omitempty"`
	// The identifier of the default template for non-members of this team.
	DefaultTemplateForNonMembersId string `json:"defaultTemplateForNonMembersId,omitempty"`
	// The identifier of the default project template of this team.
	DefaultProjectTemplateId string `json:"defaultProjectTemplateId,omitempty"`
	// Whether the team is private or not.
	Private bool `json:"private"`
	// Whether triage mode is enabled for the team.
	TriageEnabled bool `json:"triageEnabled"`
	// Whether an issue needs to have a priority set before leaving triage.
	RequirePriorityToLeaveTriage bool `json:"requirePriorityToLeaveTriage"`
	// Default status for newly created issues.
	DefaultIssueStateId string `json:"defaultIssueStateId,omitempty"`
	// Period after which issues are automatically closed, in months.
	AutoClosePeriod *float64 `json:"autoClosePeriod"`
	// The canceled workflow state which auto closed issues will be set to.
	AutoCloseStateId string `json:"autoCloseStateId,omitempty"`
	// [INTERNAL] Whether to automatically close a parent issue in this team if all its sub-issues are closed.
	AutoCloseParentIssues bool `json:"autoCloseParentIssues"`
	// [INTERNAL] Whether to automatically close all sub-issues when a parent issue in this team is closed.
	AutoCloseChildIssues bool `json:"autoCloseChildIssues"`
	// Period after which closed and completed issues are automatically archived, in months.
	AutoArchivePeriod float64 `json:"autoArchivePeriod"`
	// The workflow state into which issues are moved when they are marked as a duplicate of another issue.
	MarkedAsDuplicateWorkflowStateId string `json:"markedAsDuplicateWorkflowStateId,omitempty"`
	// Whether new users should join this team by default. Mutation restricted to workspace admins!
	JoinByDefault bool `json:"joinByDefault"`
	// Whether the team is managed by SCIM integration. Mutation restricted to workspace admins and only unsetting is allowed!
	ScimManaged bool `json:"scimManaged"`
	// The parent team ID.
	ParentId *string `json:"parentId,omitempty"`
	// [Internal] Whether the team should inherit workflow statuses from its parent.
	InheritWorkflowStatuses bool `json:"inheritWorkflowStatuses"`
	// [Internal] Whether the team should inherit its product intelligence scope from its parent. Only applies to sub-teams.
	InheritProductIntelligenceScope bool `json:"inheritProductIntelligenceScope"`
	// [Internal] The scope of product intelligence suggestion data for the team.
	ProductIntelligenceScope ProductIntelligenceScope `json:"productIntelligenceScope,omitempty"`
}

// GetName returns TeamUpdateInput.Name, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetName() string { return v.Name }

// GetDescription returns TeamUpdateInput.Description, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetDescription() *string { return v.Description }

// GetKey returns TeamUpdateInput.Key, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetKey() string { return v.Key }

// GetIcon returns TeamUpdateInput.Icon, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetIcon() *string { return v.Icon }

// GetColor returns TeamUpdateInput.Color, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetColor() *string { return v.Color }

// GetCyclesEnabled returns TeamUpdateInput.CyclesEnabled, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetCyclesEnabled() bool { return v.CyclesEnabled }

// GetCycleStartDay returns TeamUpdateInput.CycleStartDay, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetCycleStartDay() float64 { return v.CycleStartDay }

// GetCycleDuration returns TeamUpdateInput.CycleDuration, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetCycleDuration() int { return v.CycleDuration }

// GetCycleCooldownTime returns TeamUpdateInput.CycleCooldownTime, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetCycleCooldownTime() int { return v.CycleCooldownTime }

// GetCycleIssueAutoAssignStarted returns TeamUpdateInput.CycleIssueAutoAssignStarted, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetCycleIssueAutoAssignStarted() bool { return v.CycleIssueAutoAssignStarted }

// GetCycleIssueAutoAssignCompleted returns TeamUpdateInput.CycleIssueAutoAssignCompleted, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetCycleIssueAutoAssignCompleted() bool {
	return v.CycleIssueAutoAssignCompleted
}

// GetCycleLockToActive returns TeamUpdateInput.CycleLockToActive, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetCycleLockToActive() bool { return v.CycleLockToActive }

// GetCycleEnabledStartDate returns TeamUpdateInput.CycleEnabledStartDate, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetCycleEnabledStartDate() *time.Time { return v.CycleEnabledStartDate }

// GetUpcomingCycleCount returns TeamUpdateInput.UpcomingCycleCount, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetUpcomingCycleCount() float64 { return v.UpcomingCycleCount }

// GetTimezone returns TeamUpdateInput.Timezone, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetTimezone() string { return v.Timezone }

// GetInheritIssueEstimation returns TeamUpdateInput.InheritIssueEstimation, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetInheritIssueEstimation() bool { return v.InheritIssueEstimation }

// GetIssueEstimationType returns TeamUpdateInput.IssueEstimationType, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetIssueEstimationType() string { return v.IssueEstimationType }

// GetIssueEstimationAllowZero returns TeamUpdateInput.IssueEstimationAllowZero, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetIssueEstimationAllowZero() bool { return v.IssueEstimationAllowZero }

// GetSetIssueSortOrderOnStateChange returns TeamUpdateInput.SetIssueSortOrderOnStateChange, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetSetIssueSortOrderOnStateChange() string {
	return v.SetIssueSortOrderOnStateChange
}

// GetIssueEstimationExtended returns TeamUpdateInput.IssueEstimationExtended, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetIssueEstimationExtended() bool { return v.IssueEstimationExtended }

// GetDefaultIssueEstimate returns TeamUpdateInput.DefaultIssueEstimate, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetDefaultIssueEstimate() float64 { return v.DefaultIssueEstimate }

// GetSlackNewIssue returns TeamUpdateInput.SlackNewIssue, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetSlackNewIssue() bool { return v.SlackNewIssue }

// GetSlackIssueComments returns TeamUpdateInput.SlackIssueComments, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetSlackIssueComments() bool { return v.SlackIssueComments }

// GetSlackIssueStatuses returns TeamUpdateInput.SlackIssueStatuses, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetSlackIssueStatuses() bool { return v.SlackIssueStatuses }

// GetGroupIssueHistory returns TeamUpdateInput.GroupIssueHistory, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetGroupIssueHistory() bool { return v.GroupIssueHistory }

// GetAiThreadSummariesEnabled returns TeamUpdateInput.AiThreadSummariesEnabled, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetAiThreadSummariesEnabled() bool { return v.AiThreadSummariesEnabled }

// GetDefaultTemplateForMembersId returns TeamUpdateInput.DefaultTemplateForMembersId, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetDefaultTemplateForMembersId() string {
	return v.DefaultTemplateForMembersId
}

// GetDefaultTemplateForNonMembersId returns TeamUpdateInput.DefaultTemplateForNonMembersId, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetDefaultTemplateForNonMembersId() string {
	return v.DefaultTemplateForNonMembersId
}

// GetDefaultProjectTemplateId returns TeamUpdateInput.DefaultProjectTemplateId, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetDefaultProjectTemplateId() string { return v.DefaultProjectTemplateId }

// GetPrivate returns TeamUpdateInput.Private, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetPrivate() bool { return v.Private }

// GetTriageEnabled returns TeamUpdateInput.TriageEnabled, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetTriageEnabled() bool { return v.TriageEnabled }

// GetRequirePriorityToLeaveTriage returns TeamUpdateInput.RequirePriorityToLeaveTriage, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetRequirePriorityToLeaveTriage() bool {
	return v.RequirePriorityToLeaveTriage
}

// GetDefaultIssueStateId returns TeamUpdateInput.DefaultIssueStateId, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetDefaultIssueStateId() string { return v.DefaultIssueStateId }

// GetAutoClosePeriod returns TeamUpdateInput.AutoClosePeriod, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetAutoClosePeriod() *float64 { return v.AutoClosePeriod }

// GetAutoCloseStateId returns TeamUpdateInput.AutoCloseStateId, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetAutoCloseStateId() string { return v.AutoCloseStateId }

// GetAutoCloseParentIssues returns TeamUpdateInput.AutoCloseParentIssues, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetAutoCloseParentIssues() bool { return v.AutoCloseParentIssues }

// GetAutoCloseChildIssues returns TeamUpdateInput.AutoCloseChildIssues, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetAutoCloseChildIssues() bool { return v.AutoCloseChildIssues }

// GetAutoArchivePeriod returns TeamUpdateInput.AutoArchivePeriod, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetAutoArchivePeriod() float64 { return v.AutoArchivePeriod }

// GetMarkedAsDuplicateWorkflowStateId returns TeamUpdateInput.MarkedAsDuplicateWorkflowStateId, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetMarkedAsDuplicateWorkflowStateId() string {
	return v.MarkedAsDuplicateWorkflowStateId
}

// GetJoinByDefault returns TeamUpdateInput.JoinByDefault, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetJoinByDefault() bool { return v.JoinByDefault }

// GetScimManaged returns TeamUpdateInput.ScimManaged, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetScimManaged() bool { return v.ScimManaged }

// GetParentId returns TeamUpdateInput.ParentId, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetParentId() *string { return v.ParentId }

// GetInheritWorkflowStatuses returns TeamUpdateInput.InheritWorkflowStatuses, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetInheritWorkflowStatuses() bool { return v.InheritWorkflowStatuses }

// GetInheritProductIntelligenceScope returns TeamUpdateInput.InheritProductIntelligenceScope, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetInheritProductIntelligenceScope() bool {
	return v.InheritProductIntelligenceScope
}

// GetProductIntelligenceScope returns TeamUpdateInput.ProductIntelligenceScope, and is useful for accessing the field via an interface.
func (v *TeamUpdateInput) GetProductIntelligenceScope() ProductIntelligenceScope {
	return v.ProductIntelligenceScope
}

// TeamWorkflow includes the GraphQL fields of Team requested by the fragment TeamWorkflow.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type TeamWorkflow struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The team's unique key. The key is used in URLs.
	Key string `json:"key"`
	// The Git automation states for the team.
	GitAutomationStates TeamWorkflowGitAutomationStatesGitAutomationStateConnection `json:"gitAutomationStates"`
}

// GetId returns TeamWorkflow.Id, and is useful for accessing the field via an interface.
func (v *TeamWorkflow) GetId() string { return v.Id }

// GetKey returns TeamWorkflow.Key, and is useful for accessing the field via an interface.
func (v *TeamWorkflow) GetKey() string { return v.Key }

// GetGitAutomationStates returns TeamWorkflow.GitAutomationStates, and is useful for accessing the field via an interface.
func (v *TeamWorkflow) GetGitAutomationStates() TeamWorkflowGitAutomationStatesGitAutomationStateConnection {
	return v.GitAutomationStates
}

// TeamWorkflowGitAutomationStatesGitAutomationStateConnection includes the requested fields of the GraphQL type GitAutomationStateConnection.
type TeamWorkflowGitAutomationStatesGitAutomationStateConnection struct {
	Nodes []TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationState `json:"nodes"`
}

// GetNodes returns TeamWorkflowGitAutomationStatesGitAutomationStateConnection.Nodes, and is useful for accessing the field via an interface.
func (v *TeamWorkflowGitAutomationStatesGitAutomationStateConnection) GetNodes() []TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationState {
	return v.Nodes
}

// TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationState includes the requested fields of the GraphQL type GitAutomationState.
// The GraphQL type's documentation follows.
//
// A trigger that updates the issue status according to Git automations.
type TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationState struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The associated workflow state.
	State *TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationStateStateWorkflowState `json:"state"`
	// The event that triggers the automation.
	Event GitAutomationStates `json:"event"`
	// The target branch associated to this automation state.
	TargetBranch *TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationStateTargetBranchGitAutomationTargetBranch `json:"targetBranch"`
}

// GetId returns TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationState.Id, and is useful for accessing the field via an interface.
func (v *TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationState) GetId() string {
	return v.Id
}

// GetState returns TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationState.State, and is useful for accessing the field via an interface.
func (v *TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationState) GetState() *TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationStateStateWorkflowState {
	return v.State
}

// GetEvent returns TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationState.Event, and is useful for accessing the field via an interface.
func (v *TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationState) GetEvent() GitAutomationStates {
	return v.Event
}

// GetTargetBranch returns TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationState.TargetBranch, and is useful for accessing the field via an interface.
func (v *TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationState) GetTargetBranch() *TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationStateTargetBranchGitAutomationTargetBranch {
	return v.TargetBranch
}

// TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationStateStateWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationStateStateWorkflowState struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationStateStateWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationStateStateWorkflowState) GetId() string {
	return v.Id
}

// TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationStateTargetBranchGitAutomationTargetBranch includes the requested fields of the GraphQL type GitAutomationTargetBranch.
// The GraphQL type's documentation follows.
//
// A Git target branch for which there are automations (GitAutomationState).
type TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationStateTargetBranchGitAutomationTargetBranch struct {
	// The target branch pattern.
	BranchPattern string `json:"branchPattern"`
	// Whether the branch pattern is a regular expression.
	IsRegex bool `json:"isRegex"`
}

// GetBranchPattern returns TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationStateTargetBranchGitAutomationTargetBranch.BranchPattern, and is useful for accessing the field via an interface.
func (v *TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationStateTargetBranchGitAutomationTargetBranch) GetBranchPattern() string {
	return v.BranchPattern
}

// GetIsRegex returns TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationStateTargetBranchGitAutomationTargetBranch.IsRegex, and is useful for accessing the field via an interface.
func (v *TeamWorkflowGitAutomationStatesGitAutomationStateConnectionNodesGitAutomationStateTargetBranchGitAutomationTargetBranch) GetIsRegex() bool {
	return v.IsRegex
}

// WorkflowState includes the GraphQL fields of WorkflowState requested by the fragment WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type WorkflowState struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The state's name.
	Name string `json:"name"`
	// The state's UI color as a HEX string.
	Color string `json:"color"`
	// Description of the state.
	Description *string `json:"description"`
	// The type of the state. One of "triage", "backlog", "unstarted", "started", "completed", "canceled".
	Type string `json:"type"`
	// The position of the state in the team flow.
	Position float64 `json:"position"`
	// The team to which this state belongs to.
	Team WorkflowStateTeam `json:"team"`
}

// GetId returns WorkflowState.Id, and is useful for accessing the field via an interface.
func (v *WorkflowState) GetId() string { return v.Id }

// GetName returns WorkflowState.Name, and is useful for accessing the field via an interface.
func (v *WorkflowState) GetName() string { return v.Name }

// GetColor returns WorkflowState.Color, and is useful for accessing the field via an interface.
func (v *WorkflowState) GetColor() string { return v.Color }

// GetDescription returns WorkflowState.Description, and is useful for accessing the field via an interface.
func (v *WorkflowState) GetDescription() *string { return v.Description }

// GetType returns WorkflowState.Type, and is useful for accessing the field via an interface.
func (v *WorkflowState) GetType() string { return v.Type }

// GetPosition returns WorkflowState.Position, and is useful for accessing the field via an interface.
func (v *WorkflowState) GetPosition() float64 { return v.Position }

// GetTeam returns WorkflowState.Team, and is useful for accessing the field via an interface.
func (v *WorkflowState) GetTeam() WorkflowStateTeam { return v.Team }

type WorkflowStateCreateInput struct {
	// The identifier in UUID v4 format. If none is provided, the backend will generate one.
	Id string `json:"id,omitempty"`
	// The workflow type.
	Type string `json:"type"`
	// The name of the state.
	Name string `json:"name"`
	// The color of the state.
	Color string `json:"color"`
	// The description of the state.
	Description *string `json:"description"`
	// The position of the state.
	Position float64 `json:"position"`
	// The team associated with the state.
	TeamId string `json:"teamId"`
}

// GetId returns WorkflowStateCreateInput.Id, and is useful for accessing the field via an interface.
func (v *WorkflowStateCreateInput) GetId() string { return v.Id }

// GetType returns WorkflowStateCreateInput.Type, and is useful for accessing the field via an interface.
func (v *WorkflowStateCreateInput) GetType() string { return v.Type }

// GetName returns WorkflowStateCreateInput.Name, and is useful for accessing the field via an interface.
func (v *WorkflowStateCreateInput) GetName() string { return v.Name }

// GetColor returns WorkflowStateCreateInput.Color, and is useful for accessing the field via an interface.
func (v *WorkflowStateCreateInput) GetColor() string { return v.Color }

// GetDescription returns WorkflowStateCreateInput.Description, and is useful for accessing the field via an interface.
func (v *WorkflowStateCreateInput) GetDescription() *string { return v.Description }

// GetPosition returns WorkflowStateCreateInput.Position, and is useful for accessing the field via an interface.
func (v *WorkflowStateCreateInput) GetPosition() float64 { return v.Position }

// GetTeamId returns WorkflowStateCreateInput.TeamId, and is useful for accessing the field via an interface.
func (v *WorkflowStateCreateInput) GetTeamId() string { return v.TeamId }

// WorkflowStateTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type WorkflowStateTeam struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns WorkflowStateTeam.Id, and is useful for accessing the field via an interface.
func (v *WorkflowStateTeam) GetId() string { return v.Id }

type WorkflowStateUpdateInput struct {
	// The name of the state.
	Name string `json:"name,omitempty"`
	// The color of the state.
	Color string `json:"color,omitempty"`
	// The description of the state.
	Description *string `json:"description"`
	// The position of the state.
	Position float64 `json:"position"`
}

// GetName returns WorkflowStateUpdateInput.Name, and is useful for accessing the field via an interface.
func (v *WorkflowStateUpdateInput) GetName() string { return v.Name }

// GetColor returns WorkflowStateUpdateInput.Color, and is useful for accessing the field via an interface.
func (v *WorkflowStateUpdateInput) GetColor() string { return v.Color }

// GetDescription returns WorkflowStateUpdateInput.Description, and is useful for accessing the field via an interface.
func (v *WorkflowStateUpdateInput) GetDescription() *string { return v.Description }

// GetPosition returns WorkflowStateUpdateInput.Position, and is useful for accessing the field via an interface.
func (v *WorkflowStateUpdateInput) GetPosition() float64 { return v.Position }

// __createGitAutomationStateInput is used internally by genqlient
type __createGitAutomationStateInput struct {
	Input GitAutomationStateCreateInput `json:"input"`
}

// GetInput returns __createGitAutomationStateInput.Input, and is useful for accessing the field via an interface.
func (v *__createGitAutomationStateInput) GetInput() GitAutomationStateCreateInput { return v.Input }

// __createLabelInput is used internally by genqlient
type __createLabelInput struct {
	Input IssueLabelCreateInput `json:"input"`
}

// GetInput returns __createLabelInput.Input, and is useful for accessing the field via an interface.
func (v *__createLabelInput) GetInput() IssueLabelCreateInput { return v.Input }

// __createTeamInput is used internally by genqlient
type __createTeamInput struct {
	Input TeamCreateInput `json:"input"`
}

// GetInput returns __createTeamInput.Input, and is useful for accessing the field via an interface.
func (v *__createTeamInput) GetInput() TeamCreateInput { return v.Input }

// __createWorkflowStateInput is used internally by genqlient
type __createWorkflowStateInput struct {
	Input WorkflowStateCreateInput `json:"input"`
}

// GetInput returns __createWorkflowStateInput.Input, and is useful for accessing the field via an interface.
func (v *__createWorkflowStateInput) GetInput() WorkflowStateCreateInput { return v.Input }

// __deleteGitAutomationStateInput is used internally by genqlient
type __deleteGitAutomationStateInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteGitAutomationStateInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteGitAutomationStateInput) GetId() string { return v.Id }

// __deleteLabelInput is used internally by genqlient
type __deleteLabelInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteLabelInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteLabelInput) GetId() string { return v.Id }

// __deleteTeamInput is used internally by genqlient
type __deleteTeamInput struct {
	Key string `json:"key"`
}

// GetKey returns __deleteTeamInput.Key, and is useful for accessing the field via an interface.
func (v *__deleteTeamInput) GetKey() string { return v.Key }

// __deleteWorkflowStateInput is used internally by genqlient
type __deleteWorkflowStateInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteWorkflowStateInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteWorkflowStateInput) GetId() string { return v.Id }

// __findTeamLabelInput is used internally by genqlient
type __findTeamLabelInput struct {
	Name string `json:"name"`
	Key  string `json:"key"`
}

// GetName returns __findTeamLabelInput.Name, and is useful for accessing the field via an interface.
func (v *__findTeamLabelInput) GetName() string { return v.Name }

// GetKey returns __findTeamLabelInput.Key, and is useful for accessing the field via an interface.
func (v *__findTeamLabelInput) GetKey() string { return v.Key }

// __findWorkflowStateInput is used internally by genqlient
type __findWorkflowStateInput struct {
	Name string `json:"name"`
	Key  string `json:"key"`
}

// GetName returns __findWorkflowStateInput.Name, and is useful for accessing the field via an interface.
func (v *__findWorkflowStateInput) GetName() string { return v.Name }

// GetKey returns __findWorkflowStateInput.Key, and is useful for accessing the field via an interface.
func (v *__findWorkflowStateInput) GetKey() string { return v.Key }

// __findWorkspaceLabelInput is used internally by genqlient
type __findWorkspaceLabelInput struct {
	Name string `json:"name"`
}

// GetName returns __findWorkspaceLabelInput.Name, and is useful for accessing the field via an interface.
func (v *__findWorkspaceLabelInput) GetName() string { return v.Name }

// __getLabelInput is used internally by genqlient
type __getLabelInput struct {
	Id string `json:"id"`
}

// GetId returns __getLabelInput.Id, and is useful for accessing the field via an interface.
func (v *__getLabelInput) GetId() string { return v.Id }

// __getTeamInput is used internally by genqlient
type __getTeamInput struct {
	Key string `json:"key"`
}

// GetKey returns __getTeamInput.Key, and is useful for accessing the field via an interface.
func (v *__getTeamInput) GetKey() string { return v.Key }

// __getTeamWorkflowInput is used internally by genqlient
type __getTeamWorkflowInput struct {
	Key string `json:"key"`
}

// GetKey returns __getTeamWorkflowInput.Key, and is useful for accessing the field via an interface.
func (v *__getTeamWorkflowInput) GetKey() string { return v.Key }

// __getTeamWorkflowStatesInput is used internally by genqlient
type __getTeamWorkflowStatesInput struct {
	Key string `json:"key"`
}

// GetKey returns __getTeamWorkflowStatesInput.Key, and is useful for accessing the field via an interface.
func (v *__getTeamWorkflowStatesInput) GetKey() string { return v.Key }

// __getWorkflowStateInput is used internally by genqlient
type __getWorkflowStateInput struct {
	Id string `json:"id"`
}

// GetId returns __getWorkflowStateInput.Id, and is useful for accessing the field via an interface.
func (v *__getWorkflowStateInput) GetId() string { return v.Id }

// __updateGitAutomationStateInput is used internally by genqlient
type __updateGitAutomationStateInput struct {
	Id    string                        `json:"id"`
	Input GitAutomationStateUpdateInput `json:"input"`
}

// GetId returns __updateGitAutomationStateInput.Id, and is useful for accessing the field via an interface.
func (v *__updateGitAutomationStateInput) GetId() string { return v.Id }

// GetInput returns __updateGitAutomationStateInput.Input, and is useful for accessing the field via an interface.
func (v *__updateGitAutomationStateInput) GetInput() GitAutomationStateUpdateInput { return v.Input }

// __updateLabelInput is used internally by genqlient
type __updateLabelInput struct {
	Input IssueLabelUpdateInput `json:"input"`
	Id    string                `json:"id"`
}

// GetInput returns __updateLabelInput.Input, and is useful for accessing the field via an interface.
func (v *__updateLabelInput) GetInput() IssueLabelUpdateInput { return v.Input }

// GetId returns __updateLabelInput.Id, and is useful for accessing the field via an interface.
func (v *__updateLabelInput) GetId() string { return v.Id }

// __updateTeamInput is used internally by genqlient
type __updateTeamInput struct {
	Input TeamUpdateInput `json:"input"`
	Id    string          `json:"id"`
}

// GetInput returns __updateTeamInput.Input, and is useful for accessing the field via an interface.
func (v *__updateTeamInput) GetInput() TeamUpdateInput { return v.Input }

// GetId returns __updateTeamInput.Id, and is useful for accessing the field via an interface.
func (v *__updateTeamInput) GetId() string { return v.Id }

// __updateWorkflowStateInput is used internally by genqlient
type __updateWorkflowStateInput struct {
	Input WorkflowStateUpdateInput `json:"input"`
	Id    string                   `json:"id"`
}

// GetInput returns __updateWorkflowStateInput.Input, and is useful for accessing the field via an interface.
func (v *__updateWorkflowStateInput) GetInput() WorkflowStateUpdateInput { return v.Input }

// GetId returns __updateWorkflowStateInput.Id, and is useful for accessing the field via an interface.
func (v *__updateWorkflowStateInput) GetId() string { return v.Id }

// __updateWorkspaceSettingsInput is used internally by genqlient
type __updateWorkspaceSettingsInput struct {
	Input OrganizationUpdateInput `json:"input"`
}

// GetInput returns __updateWorkspaceSettingsInput.Input, and is useful for accessing the field via an interface.
func (v *__updateWorkspaceSettingsInput) GetInput() OrganizationUpdateInput { return v.Input }

// createGitAutomationStateGitAutomationStateCreateGitAutomationStatePayload includes the requested fields of the GraphQL type GitAutomationStatePayload.
type createGitAutomationStateGitAutomationStateCreateGitAutomationStatePayload struct {
	// Whether the operation was successful.
	Success bool `json:"success"`
}

// GetSuccess returns createGitAutomationStateGitAutomationStateCreateGitAutomationStatePayload.Success, and is useful for accessing the field via an interface.
func (v *createGitAutomationStateGitAutomationStateCreateGitAutomationStatePayload) GetSuccess() bool {
	return v.Success
}

// createGitAutomationStateResponse is returned by createGitAutomationState on success.
type createGitAutomationStateResponse struct {
	// Creates a new automation state.
	GitAutomationStateCreate createGitAutomationStateGitAutomationStateCreateGitAutomationStatePayload `json:"gitAutomationStateCreate"`
}

// GetGitAutomationStateCreate returns createGitAutomationStateResponse.GitAutomationStateCreate, and is useful for accessing the field via an interface.
func (v *createGitAutomationStateResponse) GetGitAutomationStateCreate() createGitAutomationStateGitAutomationStateCreateGitAutomationStatePayload {
	return v.GitAutomationStateCreate
}

// createLabelIssueLabelCreateIssueLabelPayload includes the requested fields of the GraphQL type IssueLabelPayload.
type createLabelIssueLabelCreateIssueLabelPayload struct {
	// The label that was created or updated.
	IssueLabel createLabelIssueLabelCreateIssueLabelPayloadIssueLabel `json:"issueLabel"`
}

// GetIssueLabel returns createLabelIssueLabelCreateIssueLabelPayload.IssueLabel, and is useful for accessing the field via an interface.
func (v *createLabelIssueLabelCreateIssueLabelPayload) GetIssueLabel() createLabelIssueLabelCreateIssueLabelPayloadIssueLabel {
	return v.IssueLabel
}

// createLabelIssueLabelCreateIssueLabelPayloadIssueLabel includes the requested fields of the GraphQL type IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type createLabelIssueLabelCreateIssueLabelPayloadIssueLabel struct {
	IssueLabel `json:"-"`
}

// GetId returns createLabelIssueLabelCreateIssueLabelPayloadIssueLabel.Id, and is useful for accessing the field via an interface.
func (v *createLabelIssueLabelCreateIssueLabelPayloadIssueLabel) GetId() string {
	return v.IssueLabel.Id
}

// GetName returns createLabelIssueLabelCreateIssueLabelPayloadIssueLabel.Name, and is useful for accessing the field via an interface.
func (v *createLabelIssueLabelCreateIssueLabelPayloadIssueLabel) GetName() string {
	return v.IssueLabel.Name
}

// GetDescription returns createLabelIssueLabelCreateIssueLabelPayloadIssueLabel.Description, and is useful for accessing the field via an interface.
func (v *createLabelIssueLabelCreateIssueLabelPayloadIssueLabel) GetDescription() *string {
	return v.IssueLabel.Description
}

// GetColor returns createLabelIssueLabelCreateIssueLabelPayloadIssueLabel.Color, and is useful for accessing the field via an interface.
func (v *createLabelIssueLabelCreateIssueLabelPayloadIssueLabel) GetColor() *string {
	return v.IssueLabel.Color
}

// GetParent returns createLabelIssueLabelCreateIssueLabelPayloadIssueLabel.Parent, and is useful for accessing the field via an interface.
func (v *createLabelIssueLabelCreateIssueLabelPayloadIssueLabel) GetParent() *IssueLabelParentIssueLabel {
	return v.IssueLabel.Parent
}

// GetTeam returns createLabelIssueLabelCreateIssueLabelPayloadIssueLabel.Team, and is useful for accessing the field via an interface.
func (v *createLabelIssueLabelCreateIssueLabelPayloadIssueLabel) GetTeam() *IssueLabelTeam {
	return v.IssueLabel.Team
}

func (v *createLabelIssueLabelCreateIssueLabelPayloadIssueLabel) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createLabelIssueLabelCreateIssueLabelPayloadIssueLabel
		graphql.NoUnmarshalJSON
	}
	firstPass.createLabelIssueLabelCreateIssueLabelPayloadIssueLabel = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IssueLabel)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateLabelIssueLabelCreateIssueLabelPayloadIssueLabel struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	Color *string `json:"color"`

	Parent *IssueLabelParentIssueLabel `json:"parent"`

	Team *IssueLabelTeam `json:"team"`
}

func (v *createLabelIssueLabelCreateIssueLabelPayloadIssueLabel) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createLabelIssueLabelCreateIssueLabelPayloadIssueLabel) __premarshalJSON() (*__premarshalcreateLabelIssueLabelCreateIssueLabelPayloadIssueLabel, error) {
	var retval __premarshalcreateLabelIssueLabelCreateIssueLabelPayloadIssueLabel

	retval.Id = v.IssueLabel.Id
	retval.Name = v.IssueLabel.Name
	retval.Description = v.IssueLabel.Description
	retval.Color = v.IssueLabel.Color
	retval.Parent = v.IssueLabel.Parent
	retval.Team = v.IssueLabel.Team
	return &retval, nil
}

// createLabelResponse is returned by createLabel on success.
type createLabelResponse struct {
	// Creates a new label.
	IssueLabelCreate createLabelIssueLabelCreateIssueLabelPayload `json:"issueLabelCreate"`
}

// GetIssueLabelCreate returns createLabelResponse.IssueLabelCreate, and is useful for accessing the field via an interface.
func (v *createLabelResponse) GetIssueLabelCreate() createLabelIssueLabelCreateIssueLabelPayload {
	return v.IssueLabelCreate
}

// createTeamResponse is returned by createTeam on success.
type createTeamResponse struct {
	// Creates a new team. The user who creates the team will automatically be added as a member to the newly created team.
	TeamCreate createTeamTeamCreateTeamPayload `json:"teamCreate"`
}

// GetTeamCreate returns createTeamResponse.TeamCreate, and is useful for accessing the field via an interface.
func (v *createTeamResponse) GetTeamCreate() createTeamTeamCreateTeamPayload { return v.TeamCreate }

// createTeamTeamCreateTeamPayload includes the requested fields of the GraphQL type TeamPayload.
type createTeamTeamCreateTeamPayload struct {
	// The team that was created or updated.
	Team createTeamTeamCreateTeamPayloadTeam `json:"team"`
}

// GetTeam returns createTeamTeamCreateTeamPayload.Team, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayload) GetTeam() createTeamTeamCreateTeamPayloadTeam {
	return v.Team
}

// createTeamTeamCreateTeamPayloadTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type createTeamTeamCreateTeamPayloadTeam struct {
	Team `json:"-"`
}

// GetId returns createTeamTeamCreateTeamPayloadTeam.Id, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetId() string { return v.Team.Id }

// GetName returns createTeamTeamCreateTeamPayloadTeam.Name, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetName() string { return v.Team.Name }

// GetKey returns createTeamTeamCreateTeamPayloadTeam.Key, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetKey() string { return v.Team.Key }

// GetPrivate returns createTeamTeamCreateTeamPayloadTeam.Private, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetPrivate() bool { return v.Team.Private }

// GetDescription returns createTeamTeamCreateTeamPayloadTeam.Description, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetDescription() *string { return v.Team.Description }

// GetIcon returns createTeamTeamCreateTeamPayloadTeam.Icon, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetIcon() *string { return v.Team.Icon }

// GetColor returns createTeamTeamCreateTeamPayloadTeam.Color, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetColor() *string { return v.Team.Color }

// GetTimezone returns createTeamTeamCreateTeamPayloadTeam.Timezone, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetTimezone() string { return v.Team.Timezone }

// GetGroupIssueHistory returns createTeamTeamCreateTeamPayloadTeam.GroupIssueHistory, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetGroupIssueHistory() bool {
	return v.Team.GroupIssueHistory
}

// GetSetIssueSortOrderOnStateChange returns createTeamTeamCreateTeamPayloadTeam.SetIssueSortOrderOnStateChange, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetSetIssueSortOrderOnStateChange() string {
	return v.Team.SetIssueSortOrderOnStateChange
}

// GetAutoArchivePeriod returns createTeamTeamCreateTeamPayloadTeam.AutoArchivePeriod, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetAutoArchivePeriod() float64 {
	return v.Team.AutoArchivePeriod
}

// GetAutoClosePeriod returns createTeamTeamCreateTeamPayloadTeam.AutoClosePeriod, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetAutoClosePeriod() *float64 {
	return v.Team.AutoClosePeriod
}

// GetTriageEnabled returns createTeamTeamCreateTeamPayloadTeam.TriageEnabled, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetTriageEnabled() bool { return v.Team.TriageEnabled }

// GetRequirePriorityToLeaveTriage returns createTeamTeamCreateTeamPayloadTeam.RequirePriorityToLeaveTriage, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetRequirePriorityToLeaveTriage() bool {
	return v.Team.RequirePriorityToLeaveTriage
}

// GetCyclesEnabled returns createTeamTeamCreateTeamPayloadTeam.CyclesEnabled, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetCyclesEnabled() bool { return v.Team.CyclesEnabled }

// GetCycleStartDay returns createTeamTeamCreateTeamPayloadTeam.CycleStartDay, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetCycleStartDay() float64 { return v.Team.CycleStartDay }

// GetCycleDuration returns createTeamTeamCreateTeamPayloadTeam.CycleDuration, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetCycleDuration() float64 { return v.Team.CycleDuration }

// GetCycleCooldownTime returns createTeamTeamCreateTeamPayloadTeam.CycleCooldownTime, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetCycleCooldownTime() float64 {
	return v.Team.CycleCooldownTime
}

// GetUpcomingCycleCount returns createTeamTeamCreateTeamPayloadTeam.UpcomingCycleCount, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetUpcomingCycleCount() float64 {
	return v.Team.UpcomingCycleCount
}

// GetCycleIssueAutoAssignStarted returns createTeamTeamCreateTeamPayloadTeam.CycleIssueAutoAssignStarted, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetCycleIssueAutoAssignStarted() bool {
	return v.Team.CycleIssueAutoAssignStarted
}

// GetCycleIssueAutoAssignCompleted returns createTeamTeamCreateTeamPayloadTeam.CycleIssueAutoAssignCompleted, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetCycleIssueAutoAssignCompleted() bool {
	return v.Team.CycleIssueAutoAssignCompleted
}

// GetCycleLockToActive returns createTeamTeamCreateTeamPayloadTeam.CycleLockToActive, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetCycleLockToActive() bool {
	return v.Team.CycleLockToActive
}

// GetIssueEstimationType returns createTeamTeamCreateTeamPayloadTeam.IssueEstimationType, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetIssueEstimationType() string {
	return v.Team.IssueEstimationType
}

// GetIssueEstimationAllowZero returns createTeamTeamCreateTeamPayloadTeam.IssueEstimationAllowZero, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetIssueEstimationAllowZero() bool {
	return v.Team.IssueEstimationAllowZero
}

// GetIssueEstimationExtended returns createTeamTeamCreateTeamPayloadTeam.IssueEstimationExtended, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetIssueEstimationExtended() bool {
	return v.Team.IssueEstimationExtended
}

// GetDefaultIssueEstimate returns createTeamTeamCreateTeamPayloadTeam.DefaultIssueEstimate, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetDefaultIssueEstimate() float64 {
	return v.Team.DefaultIssueEstimate
}

// GetAiThreadSummariesEnabled returns createTeamTeamCreateTeamPayloadTeam.AiThreadSummariesEnabled, and is useful for accessing the field via an interface.
func (v *createTeamTeamCreateTeamPayloadTeam) GetAiThreadSummariesEnabled() bool {
	return v.Team.AiThreadSummariesEnabled
}

func (v *createTeamTeamCreateTeamPayloadTeam) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createTeamTeamCreateTeamPayloadTeam
		graphql.NoUnmarshalJSON
	}
	firstPass.createTeamTeamCreateTeamPayloadTeam = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Team)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateTeamTeamCreateTeamPayloadTeam struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Key string `json:"key"`

	Private bool `json:"private"`

	Description *string `json:"description"`

	Icon *string `json:"icon"`

	Color *string `json:"color"`

	Timezone string `json:"timezone"`

	GroupIssueHistory bool `json:"groupIssueHistory"`

	SetIssueSortOrderOnStateChange string `json:"setIssueSortOrderOnStateChange"`

	AutoArchivePeriod float64 `json:"autoArchivePeriod"`

	AutoClosePeriod *float64 `json:"autoClosePeriod"`

	TriageEnabled bool `json:"triageEnabled"`

	RequirePriorityToLeaveTriage bool `json:"requirePriorityToLeaveTriage"`

	CyclesEnabled bool `json:"cyclesEnabled"`

	CycleStartDay float64 `json:"cycleStartDay"`

	CycleDuration float64 `json:"cycleDuration"`

	CycleCooldownTime float64 `json:"cycleCooldownTime"`

	UpcomingCycleCount float64 `json:"upcomingCycleCount"`

	CycleIssueAutoAssignStarted bool `json:"cycleIssueAutoAssignStarted"`

	CycleIssueAutoAssignCompleted bool `json:"cycleIssueAutoAssignCompleted"`

	CycleLockToActive bool `json:"cycleLockToActive"`

	IssueEstimationType string `json:"issueEstimationType"`

	IssueEstimationAllowZero bool `json:"issueEstimationAllowZero"`

	IssueEstimationExtended bool `json:"issueEstimationExtended"`

	DefaultIssueEstimate float64 `json:"defaultIssueEstimate"`

	AiThreadSummariesEnabled bool `json:"aiThreadSummariesEnabled"`
}

func (v *createTeamTeamCreateTeamPayloadTeam) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createTeamTeamCreateTeamPayloadTeam) __premarshalJSON() (*__premarshalcreateTeamTeamCreateTeamPayloadTeam, error) {
	var retval __premarshalcreateTeamTeamCreateTeamPayloadTeam

	retval.Id = v.Team.Id
	retval.Name = v.Team.Name
	retval.Key = v.Team.Key
	retval.Private = v.Team.Private
	retval.Description = v.Team.Description
	retval.Icon = v.Team.Icon
	retval.Color = v.Team.Color
	retval.Timezone = v.Team.Timezone
	retval.GroupIssueHistory = v.Team.GroupIssueHistory
	retval.SetIssueSortOrderOnStateChange = v.Team.SetIssueSortOrderOnStateChange
	retval.AutoArchivePeriod = v.Team.AutoArchivePeriod
	retval.AutoClosePeriod = v.Team.AutoClosePeriod
	retval.TriageEnabled = v.Team.TriageEnabled
	retval.RequirePriorityToLeaveTriage = v.Team.RequirePriorityToLeaveTriage
	retval.CyclesEnabled = v.Team.CyclesEnabled
	retval.CycleStartDay = v.Team.CycleStartDay
	retval.CycleDuration = v.Team.CycleDuration
	retval.CycleCooldownTime = v.Team.CycleCooldownTime
	retval.UpcomingCycleCount = v.Team.UpcomingCycleCount
	retval.CycleIssueAutoAssignStarted = v.Team.CycleIssueAutoAssignStarted
	retval.CycleIssueAutoAssignCompleted = v.Team.CycleIssueAutoAssignCompleted
	retval.CycleLockToActive = v.Team.CycleLockToActive
	retval.IssueEstimationType = v.Team.IssueEstimationType
	retval.IssueEstimationAllowZero = v.Team.IssueEstimationAllowZero
	retval.IssueEstimationExtended = v.Team.IssueEstimationExtended
	retval.DefaultIssueEstimate = v.Team.DefaultIssueEstimate
	retval.AiThreadSummariesEnabled = v.Team.AiThreadSummariesEnabled
	return &retval, nil
}

// createWorkflowStateResponse is returned by createWorkflowState on success.
type createWorkflowStateResponse struct {
	// Creates a new state, adding it to the workflow of a team.
	WorkflowStateCreate createWorkflowStateWorkflowStateCreateWorkflowStatePayload `json:"workflowStateCreate"`
}

// GetWorkflowStateCreate returns createWorkflowStateResponse.WorkflowStateCreate, and is useful for accessing the field via an interface.
func (v *createWorkflowStateResponse) GetWorkflowStateCreate() createWorkflowStateWorkflowStateCreateWorkflowStatePayload {
	return v.WorkflowStateCreate
}

// createWorkflowStateWorkflowStateCreateWorkflowStatePayload includes the requested fields of the GraphQL type WorkflowStatePayload.
type createWorkflowStateWorkflowStateCreateWorkflowStatePayload struct {
	// The state that was created or updated.
	WorkflowState createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState `json:"workflowState"`
}

// GetWorkflowState returns createWorkflowStateWorkflowStateCreateWorkflowStatePayload.WorkflowState, and is useful for accessing the field via an interface.
func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayload) GetWorkflowState() createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState {
	return v.WorkflowState
}

// createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState struct {
	WorkflowState `json:"-"`
}

// GetId returns createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState) GetId() string {
	return v.WorkflowState.Id
}

// GetName returns createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState.Name, and is useful for accessing the field via an interface.
func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState) GetName() string {
	return v.WorkflowState.Name
}

// GetColor returns createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState.Color, and is useful for accessing the field via an interface.
func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState) GetColor() string {
	return v.WorkflowState.Color
}

// GetDescription returns createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState.Description, and is useful for accessing the field via an interface.
func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState) GetDescription() *string {
	return v.WorkflowState.Description
}

// GetType returns createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState.Type, and is useful for accessing the field via an interface.
func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState) GetType() string {
	return v.WorkflowState.Type
}

// GetPosition returns createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState.Position, and is useful for accessing the field via an interface.
func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState) GetPosition() float64 {
	return v.WorkflowState.Position
}

// GetTeam returns createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState.Team, and is useful for accessing the field via an interface.
func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState) GetTeam() WorkflowStateTeam {
	return v.WorkflowState.Team
}

func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState
		graphql.NoUnmarshalJSON
	}
	firstPass.createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowState)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Color string `json:"color"`

	Description *string `json:"description"`

	Type string `json:"type"`

	Position float64 `json:"position"`

	Team WorkflowStateTeam `json:"team"`
}

func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState) __premarshalJSON() (*__premarshalcreateWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState, error) {
	var retval __premarshalcreateWorkflowStateWorkflowStateCreateWorkflowStatePayloadWorkflowState

	retval.Id = v.WorkflowState.Id
	retval.Name = v.WorkflowState.Name
	retval.Color = v.WorkflowState.Color
	retval.Description = v.WorkflowState.Description
	retval.Type = v.WorkflowState.Type
	retval.Position = v.WorkflowState.Position
	retval.Team = v.WorkflowState.Team
	return &retval, nil
}

// deleteGitAutomationStateGitAutomationStateDeleteDeletePayload includes the requested fields of the GraphQL type DeletePayload.
// The GraphQL type's documentation follows.
//
// A generic payload return from entity deletion mutations.
type deleteGitAutomationStateGitAutomationStateDeleteDeletePayload struct {
	// Whether the operation was successful.
	Success bool `json:"success"`
}

// GetSuccess returns deleteGitAutomationStateGitAutomationStateDeleteDeletePayload.Success, and is useful for accessing the field via an interface.
func (v *deleteGitAutomationStateGitAutomationStateDeleteDeletePayload) GetSuccess() bool {
	return v.Success
}

// deleteGitAutomationStateResponse is returned by deleteGitAutomationState on success.
type deleteGitAutomationStateResponse struct {
	// Archives an automation state.
	GitAutomationStateDelete deleteGitAutomationStateGitAutomationStateDeleteDeletePayload `json:"gitAutomationStateDelete"`
}

// GetGitAutomationStateDelete returns deleteGitAutomationStateResponse.GitAutomationStateDelete, and is useful for accessing the field via an interface.
func (v *deleteGitAutomationStateResponse) GetGitAutomationStateDelete() deleteGitAutomationStateGitAutomationStateDeleteDeletePayload {
	return v.GitAutomationStateDelete
}

// deleteLabelIssueLabelDeleteDeletePayload includes the requested fields of the GraphQL type DeletePayload.
// The GraphQL type's documentation follows.
//
// A generic payload return from entity deletion mutations.
type deleteLabelIssueLabelDeleteDeletePayload struct {
	// Whether the operation was successful.
	Success bool `json:"success"`
}

// GetSuccess returns deleteLabelIssueLabelDeleteDeletePayload.Success, and is useful for accessing the field via an interface.
func (v *deleteLabelIssueLabelDeleteDeletePayload) GetSuccess() bool { return v.Success }

// deleteLabelResponse is returned by deleteLabel on success.
type deleteLabelResponse struct {
	// Deletes an issue label.
	IssueLabelDelete deleteLabelIssueLabelDeleteDeletePayload `json:"issueLabelDelete"`
}

// GetIssueLabelDelete returns deleteLabelResponse.IssueLabelDelete, and is useful for accessing the field via an interface.
func (v *deleteLabelResponse) GetIssueLabelDelete() deleteLabelIssueLabelDeleteDeletePayload {
	return v.IssueLabelDelete
}

// deleteTeamResponse is returned by deleteTeam on success.
type deleteTeamResponse struct {
	// Deletes a team.
	TeamDelete deleteTeamTeamDeleteDeletePayload `json:"teamDelete"`
}

// GetTeamDelete returns deleteTeamResponse.TeamDelete, and is useful for accessing the field via an interface.
func (v *deleteTeamResponse) GetTeamDelete() deleteTeamTeamDeleteDeletePayload { return v.TeamDelete }

// deleteTeamTeamDeleteDeletePayload includes the requested fields of the GraphQL type DeletePayload.
// The GraphQL type's documentation follows.
//
// A generic payload return from entity deletion mutations.
type deleteTeamTeamDeleteDeletePayload struct {
	// Whether the operation was successful.
	Success bool `json:"success"`
}

// GetSuccess returns deleteTeamTeamDeleteDeletePayload.Success, and is useful for accessing the field via an interface.
func (v *deleteTeamTeamDeleteDeletePayload) GetSuccess() bool { return v.Success }

// deleteWorkflowStateResponse is returned by deleteWorkflowState on success.
type deleteWorkflowStateResponse struct {
	// Archives a state. Only states with issues that have all been archived can be archived.
	WorkflowStateArchive deleteWorkflowStateWorkflowStateArchiveWorkflowStateArchivePayload `json:"workflowStateArchive"`
}

// GetWorkflowStateArchive returns deleteWorkflowStateResponse.WorkflowStateArchive, and is useful for accessing the field via an interface.
func (v *deleteWorkflowStateResponse) GetWorkflowStateArchive() deleteWorkflowStateWorkflowStateArchiveWorkflowStateArchivePayload {
	return v.WorkflowStateArchive
}

// deleteWorkflowStateWorkflowStateArchiveWorkflowStateArchivePayload includes the requested fields of the GraphQL type WorkflowStateArchivePayload.
// The GraphQL type's documentation follows.
//
// A generic payload return from entity archive mutations.
type deleteWorkflowStateWorkflowStateArchiveWorkflowStateArchivePayload struct {
	// Whether the operation was successful.
	Success bool `json:"success"`
}

// GetSuccess returns deleteWorkflowStateWorkflowStateArchiveWorkflowStateArchivePayload.Success, and is useful for accessing the field via an interface.
func (v *deleteWorkflowStateWorkflowStateArchiveWorkflowStateArchivePayload) GetSuccess() bool {
	return v.Success
}

// findTeamLabelIssueLabelsIssueLabelConnection includes the requested fields of the GraphQL type IssueLabelConnection.
type findTeamLabelIssueLabelsIssueLabelConnection struct {
	Nodes []findTeamLabelIssueLabelsIssueLabelConnectionNodesIssueLabel `json:"nodes"`
}

// GetNodes returns findTeamLabelIssueLabelsIssueLabelConnection.Nodes, and is useful for accessing the field via an interface.
func (v *findTeamLabelIssueLabelsIssueLabelConnection) GetNodes() []findTeamLabelIssueLabelsIssueLabelConnectionNodesIssueLabel {
	return v.Nodes
}

// findTeamLabelIssueLabelsIssueLabelConnectionNodesIssueLabel includes the requested fields of the GraphQL type IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type findTeamLabelIssueLabelsIssueLabelConnectionNodesIssueLabel struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns findTeamLabelIssueLabelsIssueLabelConnectionNodesIssueLabel.Id, and is useful for accessing the field via an interface.
func (v *findTeamLabelIssueLabelsIssueLabelConnectionNodesIssueLabel) GetId() string { return v.Id }

// findTeamLabelResponse is returned by findTeamLabel on success.
type findTeamLabelResponse struct {
	// All issue labels.
	IssueLabels findTeamLabelIssueLabelsIssueLabelConnection `json:"issueLabels"`
}

// GetIssueLabels returns findTeamLabelResponse.IssueLabels, and is useful for accessing the field via an interface.
func (v *findTeamLabelResponse) GetIssueLabels() findTeamLabelIssueLabelsIssueLabelConnection {
	return v.IssueLabels
}

// findWorkflowStateResponse is returned by findWorkflowState on success.
type findWorkflowStateResponse struct {
	// All issue workflow states.
	WorkflowStates findWorkflowStateWorkflowStatesWorkflowStateConnection `json:"workflowStates"`
}

// GetWorkflowStates returns findWorkflowStateResponse.WorkflowStates, and is useful for accessing the field via an interface.
func (v *findWorkflowStateResponse) GetWorkflowStates() findWorkflowStateWorkflowStatesWorkflowStateConnection {
	return v.WorkflowStates
}

// findWorkflowStateWorkflowStatesWorkflowStateConnection includes the requested fields of the GraphQL type WorkflowStateConnection.
type findWorkflowStateWorkflowStatesWorkflowStateConnection struct {
	Nodes []findWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState `json:"nodes"`
}

// GetNodes returns findWorkflowStateWorkflowStatesWorkflowStateConnection.Nodes, and is useful for accessing the field via an interface.
func (v *findWorkflowStateWorkflowStatesWorkflowStateConnection) GetNodes() []findWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState {
	return v.Nodes
}

// findWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type findWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns findWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *findWorkflowStateWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetId() string {
	return v.Id
}

// findWorkspaceLabelIssueLabelsIssueLabelConnection includes the requested fields of the GraphQL type IssueLabelConnection.
type findWorkspaceLabelIssueLabelsIssueLabelConnection struct {
	Nodes []findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabel `json:"nodes"`
}

// GetNodes returns findWorkspaceLabelIssueLabelsIssueLabelConnection.Nodes, and is useful for accessing the field via an interface.
func (v *findWorkspaceLabelIssueLabelsIssueLabelConnection) GetNodes() []findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabel {
	return v.Nodes
}

// findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabel includes the requested fields of the GraphQL type IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabel struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The team that the label is associated with. If null, the label is associated with the global workspace.
	Team findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam `json:"team"`
}

// GetId returns findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabel.Id, and is useful for accessing the field via an interface.
func (v *findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabel) GetId() string {
	return v.Id
}

// GetTeam returns findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabel.Team, and is useful for accessing the field via an interface.
func (v *findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabel) GetTeam() findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam {
	return v.Team
}

// findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam.Id, and is useful for accessing the field via an interface.
func (v *findWorkspaceLabelIssueLabelsIssueLabelConnectionNodesIssueLabelTeam) GetId() string {
	return v.Id
}

// findWorkspaceLabelResponse is returned by findWorkspaceLabel on success.
type findWorkspaceLabelResponse struct {
	// All issue labels.
	IssueLabels findWorkspaceLabelIssueLabelsIssueLabelConnection `json:"issueLabels"`
}

// GetIssueLabels returns findWorkspaceLabelResponse.IssueLabels, and is useful for accessing the field via an interface.
func (v *findWorkspaceLabelResponse) GetIssueLabels() findWorkspaceLabelIssueLabelsIssueLabelConnection {
	return v.IssueLabels
}

// getLabelIssueLabel includes the requested fields of the GraphQL type IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type getLabelIssueLabel struct {
	IssueLabel `json:"-"`
}

// GetId returns getLabelIssueLabel.Id, and is useful for accessing the field via an interface.
func (v *getLabelIssueLabel) GetId() string { return v.IssueLabel.Id }

// GetName returns getLabelIssueLabel.Name, and is useful for accessing the field via an interface.
func (v *getLabelIssueLabel) GetName() string { return v.IssueLabel.Name }

// GetDescription returns getLabelIssueLabel.Description, and is useful for accessing the field via an interface.
func (v *getLabelIssueLabel) GetDescription() *string { return v.IssueLabel.Description }

// GetColor returns getLabelIssueLabel.Color, and is useful for accessing the field via an interface.
func (v *getLabelIssueLabel) GetColor() *string { return v.IssueLabel.Color }

// GetParent returns getLabelIssueLabel.Parent, and is useful for accessing the field via an interface.
func (v *getLabelIssueLabel) GetParent() *IssueLabelParentIssueLabel { return v.IssueLabel.Parent }

// GetTeam returns getLabelIssueLabel.Team, and is useful for accessing the field via an interface.
func (v *getLabelIssueLabel) GetTeam() *IssueLabelTeam { return v.IssueLabel.Team }

func (v *getLabelIssueLabel) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getLabelIssueLabel
		graphql.NoUnmarshalJSON
	}
	firstPass.getLabelIssueLabel = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IssueLabel)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetLabelIssueLabel struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	Color *string `json:"color"`

	Parent *IssueLabelParentIssueLabel `json:"parent"`

	Team *IssueLabelTeam `json:"team"`
}

func (v *getLabelIssueLabel) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getLabelIssueLabel) __premarshalJSON() (*__premarshalgetLabelIssueLabel, error) {
	var retval __premarshalgetLabelIssueLabel

	retval.Id = v.IssueLabel.Id
	retval.Name = v.IssueLabel.Name
	retval.Description = v.IssueLabel.Description
	retval.Color = v.IssueLabel.Color
	retval.Parent = v.IssueLabel.Parent
	retval.Team = v.IssueLabel.Team
	return &retval, nil
}

// getLabelResponse is returned by getLabel on success.
type getLabelResponse struct {
	// One specific label.
	IssueLabel getLabelIssueLabel `json:"issueLabel"`
}

// GetIssueLabel returns getLabelResponse.IssueLabel, and is useful for accessing the field via an interface.
func (v *getLabelResponse) GetIssueLabel() getLabelIssueLabel { return v.IssueLabel }

// getTeamResponse is returned by getTeam on success.
type getTeamResponse struct {
	// One specific team.
	Team getTeamTeam `json:"team"`
}

// GetTeam returns getTeamResponse.Team, and is useful for accessing the field via an interface.
func (v *getTeamResponse) GetTeam() getTeamTeam { return v.Team }

// getTeamTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type getTeamTeam struct {
	Team `json:"-"`
}

// GetId returns getTeamTeam.Id, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetId() string { return v.Team.Id }

// GetName returns getTeamTeam.Name, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetName() string { return v.Team.Name }

// GetKey returns getTeamTeam.Key, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetKey() string { return v.Team.Key }

// GetPrivate returns getTeamTeam.Private, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetPrivate() bool { return v.Team.Private }

// GetDescription returns getTeamTeam.Description, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetDescription() *string { return v.Team.Description }

// GetIcon returns getTeamTeam.Icon, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetIcon() *string { return v.Team.Icon }

// GetColor returns getTeamTeam.Color, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetColor() *string { return v.Team.Color }

// GetTimezone returns getTeamTeam.Timezone, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetTimezone() string { return v.Team.Timezone }

// GetGroupIssueHistory returns getTeamTeam.GroupIssueHistory, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetGroupIssueHistory() bool { return v.Team.GroupIssueHistory }

// GetSetIssueSortOrderOnStateChange returns getTeamTeam.SetIssueSortOrderOnStateChange, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetSetIssueSortOrderOnStateChange() string {
	return v.Team.SetIssueSortOrderOnStateChange
}

// GetAutoArchivePeriod returns getTeamTeam.AutoArchivePeriod, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetAutoArchivePeriod() float64 { return v.Team.AutoArchivePeriod }

// GetAutoClosePeriod returns getTeamTeam.AutoClosePeriod, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetAutoClosePeriod() *float64 { return v.Team.AutoClosePeriod }

// GetTriageEnabled returns getTeamTeam.TriageEnabled, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetTriageEnabled() bool { return v.Team.TriageEnabled }

// GetRequirePriorityToLeaveTriage returns getTeamTeam.RequirePriorityToLeaveTriage, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetRequirePriorityToLeaveTriage() bool {
	return v.Team.RequirePriorityToLeaveTriage
}

// GetCyclesEnabled returns getTeamTeam.CyclesEnabled, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetCyclesEnabled() bool { return v.Team.CyclesEnabled }

// GetCycleStartDay returns getTeamTeam.CycleStartDay, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetCycleStartDay() float64 { return v.Team.CycleStartDay }

// GetCycleDuration returns getTeamTeam.CycleDuration, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetCycleDuration() float64 { return v.Team.CycleDuration }

// GetCycleCooldownTime returns getTeamTeam.CycleCooldownTime, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetCycleCooldownTime() float64 { return v.Team.CycleCooldownTime }

// GetUpcomingCycleCount returns getTeamTeam.UpcomingCycleCount, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetUpcomingCycleCount() float64 { return v.Team.UpcomingCycleCount }

// GetCycleIssueAutoAssignStarted returns getTeamTeam.CycleIssueAutoAssignStarted, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetCycleIssueAutoAssignStarted() bool {
	return v.Team.CycleIssueAutoAssignStarted
}

// GetCycleIssueAutoAssignCompleted returns getTeamTeam.CycleIssueAutoAssignCompleted, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetCycleIssueAutoAssignCompleted() bool {
	return v.Team.CycleIssueAutoAssignCompleted
}

// GetCycleLockToActive returns getTeamTeam.CycleLockToActive, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetCycleLockToActive() bool { return v.Team.CycleLockToActive }

// GetIssueEstimationType returns getTeamTeam.IssueEstimationType, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetIssueEstimationType() string { return v.Team.IssueEstimationType }

// GetIssueEstimationAllowZero returns getTeamTeam.IssueEstimationAllowZero, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetIssueEstimationAllowZero() bool { return v.Team.IssueEstimationAllowZero }

// GetIssueEstimationExtended returns getTeamTeam.IssueEstimationExtended, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetIssueEstimationExtended() bool { return v.Team.IssueEstimationExtended }

// GetDefaultIssueEstimate returns getTeamTeam.DefaultIssueEstimate, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetDefaultIssueEstimate() float64 { return v.Team.DefaultIssueEstimate }

// GetAiThreadSummariesEnabled returns getTeamTeam.AiThreadSummariesEnabled, and is useful for accessing the field via an interface.
func (v *getTeamTeam) GetAiThreadSummariesEnabled() bool { return v.Team.AiThreadSummariesEnabled }

func (v *getTeamTeam) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getTeamTeam
		graphql.NoUnmarshalJSON
	}
	firstPass.getTeamTeam = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Team)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetTeamTeam struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Key string `json:"key"`

	Private bool `json:"private"`

	Description *string `json:"description"`

	Icon *string `json:"icon"`

	Color *string `json:"color"`

	Timezone string `json:"timezone"`

	GroupIssueHistory bool `json:"groupIssueHistory"`

	SetIssueSortOrderOnStateChange string `json:"setIssueSortOrderOnStateChange"`

	AutoArchivePeriod float64 `json:"autoArchivePeriod"`

	AutoClosePeriod *float64 `json:"autoClosePeriod"`

	TriageEnabled bool `json:"triageEnabled"`

	RequirePriorityToLeaveTriage bool `json:"requirePriorityToLeaveTriage"`

	CyclesEnabled bool `json:"cyclesEnabled"`

	CycleStartDay float64 `json:"cycleStartDay"`

	CycleDuration float64 `json:"cycleDuration"`

	CycleCooldownTime float64 `json:"cycleCooldownTime"`

	UpcomingCycleCount float64 `json:"upcomingCycleCount"`

	CycleIssueAutoAssignStarted bool `json:"cycleIssueAutoAssignStarted"`

	CycleIssueAutoAssignCompleted bool `json:"cycleIssueAutoAssignCompleted"`

	CycleLockToActive bool `json:"cycleLockToActive"`

	IssueEstimationType string `json:"issueEstimationType"`

	IssueEstimationAllowZero bool `json:"issueEstimationAllowZero"`

	IssueEstimationExtended bool `json:"issueEstimationExtended"`

	DefaultIssueEstimate float64 `json:"defaultIssueEstimate"`

	AiThreadSummariesEnabled bool `json:"aiThreadSummariesEnabled"`
}

func (v *getTeamTeam) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getTeamTeam) __premarshalJSON() (*__premarshalgetTeamTeam, error) {
	var retval __premarshalgetTeamTeam

	retval.Id = v.Team.Id
	retval.Name = v.Team.Name
	retval.Key = v.Team.Key
	retval.Private = v.Team.Private
	retval.Description = v.Team.Description
	retval.Icon = v.Team.Icon
	retval.Color = v.Team.Color
	retval.Timezone = v.Team.Timezone
	retval.GroupIssueHistory = v.Team.GroupIssueHistory
	retval.SetIssueSortOrderOnStateChange = v.Team.SetIssueSortOrderOnStateChange
	retval.AutoArchivePeriod = v.Team.AutoArchivePeriod
	retval.AutoClosePeriod = v.Team.AutoClosePeriod
	retval.TriageEnabled = v.Team.TriageEnabled
	retval.RequirePriorityToLeaveTriage = v.Team.RequirePriorityToLeaveTriage
	retval.CyclesEnabled = v.Team.CyclesEnabled
	retval.CycleStartDay = v.Team.CycleStartDay
	retval.CycleDuration = v.Team.CycleDuration
	retval.CycleCooldownTime = v.Team.CycleCooldownTime
	retval.UpcomingCycleCount = v.Team.UpcomingCycleCount
	retval.CycleIssueAutoAssignStarted = v.Team.CycleIssueAutoAssignStarted
	retval.CycleIssueAutoAssignCompleted = v.Team.CycleIssueAutoAssignCompleted
	retval.CycleLockToActive = v.Team.CycleLockToActive
	retval.IssueEstimationType = v.Team.IssueEstimationType
	retval.IssueEstimationAllowZero = v.Team.IssueEstimationAllowZero
	retval.IssueEstimationExtended = v.Team.IssueEstimationExtended
	retval.DefaultIssueEstimate = v.Team.DefaultIssueEstimate
	retval.AiThreadSummariesEnabled = v.Team.AiThreadSummariesEnabled
	return &retval, nil
}

// getTeamWorkflowResponse is returned by getTeamWorkflow on success.
type getTeamWorkflowResponse struct {
	// One specific team.
	Team getTeamWorkflowTeam `json:"team"`
}

// GetTeam returns getTeamWorkflowResponse.Team, and is useful for accessing the field via an interface.
func (v *getTeamWorkflowResponse) GetTeam() getTeamWorkflowTeam { return v.Team }

// getTeamWorkflowStatesResponse is returned by getTeamWorkflowStates on success.
type getTeamWorkflowStatesResponse struct {
	// All issue workflow states.
	WorkflowStates getTeamWorkflowStatesWorkflowStatesWorkflowStateConnection `json:"workflowStates"`
}

// GetWorkflowStates returns getTeamWorkflowStatesResponse.WorkflowStates, and is useful for accessing the field via an interface.
func (v *getTeamWorkflowStatesResponse) GetWorkflowStates() getTeamWorkflowStatesWorkflowStatesWorkflowStateConnection {
	return v.WorkflowStates
}

// getTeamWorkflowStatesWorkflowStatesWorkflowStateConnection includes the requested fields of the GraphQL type WorkflowStateConnection.
type getTeamWorkflowStatesWorkflowStatesWorkflowStateConnection struct {
	Nodes []getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState `json:"nodes"`
}

// GetNodes returns getTeamWorkflowStatesWorkflowStatesWorkflowStateConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getTeamWorkflowStatesWorkflowStatesWorkflowStateConnection) GetNodes() []getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState {
	return v.Nodes
}

// getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState struct {
	WorkflowState `json:"-"`
}

// GetId returns getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetId() string {
	return v.WorkflowState.Id
}

// GetName returns getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState.Name, and is useful for accessing the field via an interface.
func (v *getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetName() string {
	return v.WorkflowState.Name
}

// GetColor returns getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState.Color, and is useful for accessing the field via an interface.
func (v *getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetColor() string {
	return v.WorkflowState.Color
}

// GetDescription returns getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState.Description, and is useful for accessing the field via an interface.
func (v *getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetDescription() *string {
	return v.WorkflowState.Description
}

// GetType returns getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState.Type, and is useful for accessing the field via an interface.
func (v *getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetType() string {
	return v.WorkflowState.Type
}

// GetPosition returns getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState.Position, and is useful for accessing the field via an interface.
func (v *getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetPosition() float64 {
	return v.WorkflowState.Position
}

// GetTeam returns getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState.Team, and is useful for accessing the field via an interface.
func (v *getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState) GetTeam() WorkflowStateTeam {
	return v.WorkflowState.Team
}

func (v *getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState
		graphql.NoUnmarshalJSON
	}
	firstPass.getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowState)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Color string `json:"color"`

	Description *string `json:"description"`

	Type string `json:"type"`

	Position float64 `json:"position"`

	Team WorkflowStateTeam `json:"team"`
}

func (v *getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState) __premarshalJSON() (*__premarshalgetTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState, error) {
	var retval __premarshalgetTeamWorkflowStatesWorkflowStatesWorkflowStateConnectionNodesWorkflowState

	retval.Id = v.WorkflowState.Id
	retval.Name = v.WorkflowState.Name
	retval.Color = v.WorkflowState.Color
	retval.Description = v.WorkflowState.Description
	retval.Type = v.WorkflowState.Type
	retval.Position = v.WorkflowState.Position
	retval.Team = v.WorkflowState.Team
	return &retval, nil
}

// getTeamWorkflowTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type getTeamWorkflowTeam struct {
	TeamWorkflow `json:"-"`
}

// GetId returns getTeamWorkflowTeam.Id, and is useful for accessing the field via an interface.
func (v *getTeamWorkflowTeam) GetId() string { return v.TeamWorkflow.Id }

// GetKey returns getTeamWorkflowTeam.Key, and is useful for accessing the field via an interface.
func (v *getTeamWorkflowTeam) GetKey() string { return v.TeamWorkflow.Key }

// GetGitAutomationStates returns getTeamWorkflowTeam.GitAutomationStates, and is useful for accessing the field via an interface.
func (v *getTeamWorkflowTeam) GetGitAutomationStates() TeamWorkflowGitAutomationStatesGitAutomationStateConnection {
	return v.TeamWorkflow.GitAutomationStates
}

func (v *getTeamWorkflowTeam) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getTeamWorkflowTeam
		graphql.NoUnmarshalJSON
	}
	firstPass.getTeamWorkflowTeam = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TeamWorkflow)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetTeamWorkflowTeam struct {
	Id string `json:"id"`

	Key string `json:"key"`

	GitAutomationStates TeamWorkflowGitAutomationStatesGitAutomationStateConnection `json:"gitAutomationStates"`
}

func (v *getTeamWorkflowTeam) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getTeamWorkflowTeam) __premarshalJSON() (*__premarshalgetTeamWorkflowTeam, error) {
	var retval __premarshalgetTeamWorkflowTeam

	retval.Id = v.TeamWorkflow.Id
	retval.Key = v.TeamWorkflow.Key
	retval.GitAutomationStates = v.TeamWorkflow.GitAutomationStates
	return &retval, nil
}

// getWorkflowStateResponse is returned by getWorkflowState on success.
type getWorkflowStateResponse struct {
	// One specific state.
	WorkflowState getWorkflowStateWorkflowState `json:"workflowState"`
}

// GetWorkflowState returns getWorkflowStateResponse.WorkflowState, and is useful for accessing the field via an interface.
func (v *getWorkflowStateResponse) GetWorkflowState() getWorkflowStateWorkflowState {
	return v.WorkflowState
}

// getWorkflowStateWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type getWorkflowStateWorkflowState struct {
	WorkflowState `json:"-"`
}

// GetId returns getWorkflowStateWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *getWorkflowStateWorkflowState) GetId() string { return v.WorkflowState.Id }

// GetName returns getWorkflowStateWorkflowState.Name, and is useful for accessing the field via an interface.
func (v *getWorkflowStateWorkflowState) GetName() string { return v.WorkflowState.Name }

// GetColor returns getWorkflowStateWorkflowState.Color, and is useful for accessing the field via an interface.
func (v *getWorkflowStateWorkflowState) GetColor() string { return v.WorkflowState.Color }

// GetDescription returns getWorkflowStateWorkflowState.Description, and is useful for accessing the field via an interface.
func (v *getWorkflowStateWorkflowState) GetDescription() *string { return v.WorkflowState.Description }

// GetType returns getWorkflowStateWorkflowState.Type, and is useful for accessing the field via an interface.
func (v *getWorkflowStateWorkflowState) GetType() string { return v.WorkflowState.Type }

// GetPosition returns getWorkflowStateWorkflowState.Position, and is useful for accessing the field via an interface.
func (v *getWorkflowStateWorkflowState) GetPosition() float64 { return v.WorkflowState.Position }

// GetTeam returns getWorkflowStateWorkflowState.Team, and is useful for accessing the field via an interface.
func (v *getWorkflowStateWorkflowState) GetTeam() WorkflowStateTeam { return v.WorkflowState.Team }

func (v *getWorkflowStateWorkflowState) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getWorkflowStateWorkflowState
		graphql.NoUnmarshalJSON
	}
	firstPass.getWorkflowStateWorkflowState = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowState)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetWorkflowStateWorkflowState struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Color string `json:"color"`

	Description *string `json:"description"`

	Type string `json:"type"`

	Position float64 `json:"position"`

	Team WorkflowStateTeam `json:"team"`
}

func (v *getWorkflowStateWorkflowState) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getWorkflowStateWorkflowState) __premarshalJSON() (*__premarshalgetWorkflowStateWorkflowState, error) {
	var retval __premarshalgetWorkflowStateWorkflowState

	retval.Id = v.WorkflowState.Id
	retval.Name = v.WorkflowState.Name
	retval.Color = v.WorkflowState.Color
	retval.Description = v.WorkflowState.Description
	retval.Type = v.WorkflowState.Type
	retval.Position = v.WorkflowState.Position
	retval.Team = v.WorkflowState.Team
	return &retval, nil
}

// getWorkspaceOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An organization. Organizations are root-level objects that contain user accounts and teams.
type getWorkspaceOrganization struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The organization's unique URL key.
	UrlKey string `json:"urlKey"`
	// The organization's name.
	Name string `json:"name"`
}

// GetId returns getWorkspaceOrganization.Id, and is useful for accessing the field via an interface.
func (v *getWorkspaceOrganization) GetId() string { return v.Id }

// GetUrlKey returns getWorkspaceOrganization.UrlKey, and is useful for accessing the field via an interface.
func (v *getWorkspaceOrganization) GetUrlKey() string { return v.UrlKey }

// GetName returns getWorkspaceOrganization.Name, and is useful for accessing the field via an interface.
func (v *getWorkspaceOrganization) GetName() string { return v.Name }

// getWorkspaceResponse is returned by getWorkspace on success.
type getWorkspaceResponse struct {
	// The user's organization.
	Organization getWorkspaceOrganization `json:"organization"`
}

// GetOrganization returns getWorkspaceResponse.Organization, and is useful for accessing the field via an interface.
func (v *getWorkspaceResponse) GetOrganization() getWorkspaceOrganization { return v.Organization }

// getWorkspaceSettingsOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An organization. Organizations are root-level objects that contain user accounts and teams.
type getWorkspaceSettingsOrganization struct {
	Organization `json:"-"`
}

// GetId returns getWorkspaceSettingsOrganization.Id, and is useful for accessing the field via an interface.
func (v *getWorkspaceSettingsOrganization) GetId() string { return v.Organization.Id }

// GetAllowMembersToInvite returns getWorkspaceSettingsOrganization.AllowMembersToInvite, and is useful for accessing the field via an interface.
func (v *getWorkspaceSettingsOrganization) GetAllowMembersToInvite() bool {
	return v.Organization.AllowMembersToInvite
}

// GetRoadmapEnabled returns getWorkspaceSettingsOrganization.RoadmapEnabled, and is useful for accessing the field via an interface.
func (v *getWorkspaceSettingsOrganization) GetRoadmapEnabled() bool {
	return v.Organization.RoadmapEnabled
}

// GetGitLinkbackMessagesEnabled returns getWorkspaceSettingsOrganization.GitLinkbackMessagesEnabled, and is useful for accessing the field via an interface.
func (v *getWorkspaceSettingsOrganization) GetGitLinkbackMessagesEnabled() bool {
	return v.Organization.GitLinkbackMessagesEnabled
}

// GetGitPublicLinkbackMessagesEnabled returns getWorkspaceSettingsOrganization.GitPublicLinkbackMessagesEnabled, and is useful for accessing the field via an interface.
func (v *getWorkspaceSettingsOrganization) GetGitPublicLinkbackMessagesEnabled() bool {
	return v.Organization.GitPublicLinkbackMessagesEnabled
}

func (v *getWorkspaceSettingsOrganization) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getWorkspaceSettingsOrganization
		graphql.NoUnmarshalJSON
	}
	firstPass.getWorkspaceSettingsOrganization = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Organization)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetWorkspaceSettingsOrganization struct {
	Id string `json:"id"`

	AllowMembersToInvite bool `json:"allowMembersToInvite"`

	RoadmapEnabled bool `json:"roadmapEnabled"`

	GitLinkbackMessagesEnabled bool `json:"gitLinkbackMessagesEnabled"`

	GitPublicLinkbackMessagesEnabled bool `json:"gitPublicLinkbackMessagesEnabled"`
}

func (v *getWorkspaceSettingsOrganization) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getWorkspaceSettingsOrganization) __premarshalJSON() (*__premarshalgetWorkspaceSettingsOrganization, error) {
	var retval __premarshalgetWorkspaceSettingsOrganization

	retval.Id = v.Organization.Id
	retval.AllowMembersToInvite = v.Organization.AllowMembersToInvite
	retval.RoadmapEnabled = v.Organization.RoadmapEnabled
	retval.GitLinkbackMessagesEnabled = v.Organization.GitLinkbackMessagesEnabled
	retval.GitPublicLinkbackMessagesEnabled = v.Organization.GitPublicLinkbackMessagesEnabled
	return &retval, nil
}

// getWorkspaceSettingsResponse is returned by getWorkspaceSettings on success.
type getWorkspaceSettingsResponse struct {
	// The user's organization.
	Organization getWorkspaceSettingsOrganization `json:"organization"`
}

// GetOrganization returns getWorkspaceSettingsResponse.Organization, and is useful for accessing the field via an interface.
func (v *getWorkspaceSettingsResponse) GetOrganization() getWorkspaceSettingsOrganization {
	return v.Organization
}

// updateGitAutomationStateGitAutomationStateUpdateGitAutomationStatePayload includes the requested fields of the GraphQL type GitAutomationStatePayload.
type updateGitAutomationStateGitAutomationStateUpdateGitAutomationStatePayload struct {
	// Whether the operation was successful.
	Success bool `json:"success"`
}

// GetSuccess returns updateGitAutomationStateGitAutomationStateUpdateGitAutomationStatePayload.Success, and is useful for accessing the field via an interface.
func (v *updateGitAutomationStateGitAutomationStateUpdateGitAutomationStatePayload) GetSuccess() bool {
	return v.Success
}

// updateGitAutomationStateResponse is returned by updateGitAutomationState on success.
type updateGitAutomationStateResponse struct {
	// Updates an existing state.
	GitAutomationStateUpdate updateGitAutomationStateGitAutomationStateUpdateGitAutomationStatePayload `json:"gitAutomationStateUpdate"`
}

// GetGitAutomationStateUpdate returns updateGitAutomationStateResponse.GitAutomationStateUpdate, and is useful for accessing the field via an interface.
func (v *updateGitAutomationStateResponse) GetGitAutomationStateUpdate() updateGitAutomationStateGitAutomationStateUpdateGitAutomationStatePayload {
	return v.GitAutomationStateUpdate
}

// updateLabelIssueLabelUpdateIssueLabelPayload includes the requested fields of the GraphQL type IssueLabelPayload.
type updateLabelIssueLabelUpdateIssueLabelPayload struct {
	// The label that was created or updated.
	IssueLabel updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel `json:"issueLabel"`
}

// GetIssueLabel returns updateLabelIssueLabelUpdateIssueLabelPayload.IssueLabel, and is useful for accessing the field via an interface.
func (v *updateLabelIssueLabelUpdateIssueLabelPayload) GetIssueLabel() updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel {
	return v.IssueLabel
}

// updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel includes the requested fields of the GraphQL type IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel struct {
	IssueLabel `json:"-"`
}

// GetId returns updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel.Id, and is useful for accessing the field via an interface.
func (v *updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel) GetId() string {
	return v.IssueLabel.Id
}

// GetName returns updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel.Name, and is useful for accessing the field via an interface.
func (v *updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel) GetName() string {
	return v.IssueLabel.Name
}

// GetDescription returns updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel.Description, and is useful for accessing the field via an interface.
func (v *updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel) GetDescription() *string {
	return v.IssueLabel.Description
}

// GetColor returns updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel.Color, and is useful for accessing the field via an interface.
func (v *updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel) GetColor() *string {
	return v.IssueLabel.Color
}

// GetParent returns updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel.Parent, and is useful for accessing the field via an interface.
func (v *updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel) GetParent() *IssueLabelParentIssueLabel {
	return v.IssueLabel.Parent
}

// GetTeam returns updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel.Team, and is useful for accessing the field via an interface.
func (v *updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel) GetTeam() *IssueLabelTeam {
	return v.IssueLabel.Team
}

func (v *updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel
		graphql.NoUnmarshalJSON
	}
	firstPass.updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IssueLabel)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	Color *string `json:"color"`

	Parent *IssueLabelParentIssueLabel `json:"parent"`

	Team *IssueLabelTeam `json:"team"`
}

func (v *updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel) __premarshalJSON() (*__premarshalupdateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel, error) {
	var retval __premarshalupdateLabelIssueLabelUpdateIssueLabelPayloadIssueLabel

	retval.Id = v.IssueLabel.Id
	retval.Name = v.IssueLabel.Name
	retval.Description = v.IssueLabel.Description
	retval.Color = v.IssueLabel.Color
	retval.Parent = v.IssueLabel.Parent
	retval.Team = v.IssueLabel.Team
	return &retval, nil
}

// updateLabelResponse is returned by updateLabel on success.
type updateLabelResponse struct {
	// Updates an label.
	IssueLabelUpdate updateLabelIssueLabelUpdateIssueLabelPayload `json:"issueLabelUpdate"`
}

// GetIssueLabelUpdate returns updateLabelResponse.IssueLabelUpdate, and is useful for accessing the field via an interface.
func (v *updateLabelResponse) GetIssueLabelUpdate() updateLabelIssueLabelUpdateIssueLabelPayload {
	return v.IssueLabelUpdate
}

// updateTeamResponse is returned by updateTeam on success.
type updateTeamResponse struct {
	// Updates a team.
	TeamUpdate updateTeamTeamUpdateTeamPayload `json:"teamUpdate"`
}

// GetTeamUpdate returns updateTeamResponse.TeamUpdate, and is useful for accessing the field via an interface.
func (v *updateTeamResponse) GetTeamUpdate() updateTeamTeamUpdateTeamPayload { return v.TeamUpdate }

// updateTeamTeamUpdateTeamPayload includes the requested fields of the GraphQL type TeamPayload.
type updateTeamTeamUpdateTeamPayload struct {
	// The team that was created or updated.
	Team updateTeamTeamUpdateTeamPayloadTeam `json:"team"`
}

// GetTeam returns updateTeamTeamUpdateTeamPayload.Team, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayload) GetTeam() updateTeamTeamUpdateTeamPayloadTeam {
	return v.Team
}

// updateTeamTeamUpdateTeamPayloadTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type updateTeamTeamUpdateTeamPayloadTeam struct {
	Team `json:"-"`
}

// GetId returns updateTeamTeamUpdateTeamPayloadTeam.Id, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetId() string { return v.Team.Id }

// GetName returns updateTeamTeamUpdateTeamPayloadTeam.Name, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetName() string { return v.Team.Name }

// GetKey returns updateTeamTeamUpdateTeamPayloadTeam.Key, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetKey() string { return v.Team.Key }

// GetPrivate returns updateTeamTeamUpdateTeamPayloadTeam.Private, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetPrivate() bool { return v.Team.Private }

// GetDescription returns updateTeamTeamUpdateTeamPayloadTeam.Description, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetDescription() *string { return v.Team.Description }

// GetIcon returns updateTeamTeamUpdateTeamPayloadTeam.Icon, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetIcon() *string { return v.Team.Icon }

// GetColor returns updateTeamTeamUpdateTeamPayloadTeam.Color, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetColor() *string { return v.Team.Color }

// GetTimezone returns updateTeamTeamUpdateTeamPayloadTeam.Timezone, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetTimezone() string { return v.Team.Timezone }

// GetGroupIssueHistory returns updateTeamTeamUpdateTeamPayloadTeam.GroupIssueHistory, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetGroupIssueHistory() bool {
	return v.Team.GroupIssueHistory
}

// GetSetIssueSortOrderOnStateChange returns updateTeamTeamUpdateTeamPayloadTeam.SetIssueSortOrderOnStateChange, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetSetIssueSortOrderOnStateChange() string {
	return v.Team.SetIssueSortOrderOnStateChange
}

// GetAutoArchivePeriod returns updateTeamTeamUpdateTeamPayloadTeam.AutoArchivePeriod, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetAutoArchivePeriod() float64 {
	return v.Team.AutoArchivePeriod
}

// GetAutoClosePeriod returns updateTeamTeamUpdateTeamPayloadTeam.AutoClosePeriod, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetAutoClosePeriod() *float64 {
	return v.Team.AutoClosePeriod
}

// GetTriageEnabled returns updateTeamTeamUpdateTeamPayloadTeam.TriageEnabled, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetTriageEnabled() bool { return v.Team.TriageEnabled }

// GetRequirePriorityToLeaveTriage returns updateTeamTeamUpdateTeamPayloadTeam.RequirePriorityToLeaveTriage, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetRequirePriorityToLeaveTriage() bool {
	return v.Team.RequirePriorityToLeaveTriage
}

// GetCyclesEnabled returns updateTeamTeamUpdateTeamPayloadTeam.CyclesEnabled, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetCyclesEnabled() bool { return v.Team.CyclesEnabled }

// GetCycleStartDay returns updateTeamTeamUpdateTeamPayloadTeam.CycleStartDay, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetCycleStartDay() float64 { return v.Team.CycleStartDay }

// GetCycleDuration returns updateTeamTeamUpdateTeamPayloadTeam.CycleDuration, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetCycleDuration() float64 { return v.Team.CycleDuration }

// GetCycleCooldownTime returns updateTeamTeamUpdateTeamPayloadTeam.CycleCooldownTime, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetCycleCooldownTime() float64 {
	return v.Team.CycleCooldownTime
}

// GetUpcomingCycleCount returns updateTeamTeamUpdateTeamPayloadTeam.UpcomingCycleCount, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetUpcomingCycleCount() float64 {
	return v.Team.UpcomingCycleCount
}

// GetCycleIssueAutoAssignStarted returns updateTeamTeamUpdateTeamPayloadTeam.CycleIssueAutoAssignStarted, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetCycleIssueAutoAssignStarted() bool {
	return v.Team.CycleIssueAutoAssignStarted
}

// GetCycleIssueAutoAssignCompleted returns updateTeamTeamUpdateTeamPayloadTeam.CycleIssueAutoAssignCompleted, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetCycleIssueAutoAssignCompleted() bool {
	return v.Team.CycleIssueAutoAssignCompleted
}

// GetCycleLockToActive returns updateTeamTeamUpdateTeamPayloadTeam.CycleLockToActive, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetCycleLockToActive() bool {
	return v.Team.CycleLockToActive
}

// GetIssueEstimationType returns updateTeamTeamUpdateTeamPayloadTeam.IssueEstimationType, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetIssueEstimationType() string {
	return v.Team.IssueEstimationType
}

// GetIssueEstimationAllowZero returns updateTeamTeamUpdateTeamPayloadTeam.IssueEstimationAllowZero, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetIssueEstimationAllowZero() bool {
	return v.Team.IssueEstimationAllowZero
}

// GetIssueEstimationExtended returns updateTeamTeamUpdateTeamPayloadTeam.IssueEstimationExtended, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetIssueEstimationExtended() bool {
	return v.Team.IssueEstimationExtended
}

// GetDefaultIssueEstimate returns updateTeamTeamUpdateTeamPayloadTeam.DefaultIssueEstimate, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetDefaultIssueEstimate() float64 {
	return v.Team.DefaultIssueEstimate
}

// GetAiThreadSummariesEnabled returns updateTeamTeamUpdateTeamPayloadTeam.AiThreadSummariesEnabled, and is useful for accessing the field via an interface.
func (v *updateTeamTeamUpdateTeamPayloadTeam) GetAiThreadSummariesEnabled() bool {
	return v.Team.AiThreadSummariesEnabled
}

func (v *updateTeamTeamUpdateTeamPayloadTeam) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateTeamTeamUpdateTeamPayloadTeam
		graphql.NoUnmarshalJSON
	}
	firstPass.updateTeamTeamUpdateTeamPayloadTeam = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Team)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateTeamTeamUpdateTeamPayloadTeam struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Key string `json:"key"`

	Private bool `json:"private"`

	Description *string `json:"description"`

	Icon *string `json:"icon"`

	Color *string `json:"color"`

	Timezone string `json:"timezone"`

	GroupIssueHistory bool `json:"groupIssueHistory"`

	SetIssueSortOrderOnStateChange string `json:"setIssueSortOrderOnStateChange"`

	AutoArchivePeriod float64 `json:"autoArchivePeriod"`

	AutoClosePeriod *float64 `json:"autoClosePeriod"`

	TriageEnabled bool `json:"triageEnabled"`

	RequirePriorityToLeaveTriage bool `json:"requirePriorityToLeaveTriage"`

	CyclesEnabled bool `json:"cyclesEnabled"`

	CycleStartDay float64 `json:"cycleStartDay"`

	CycleDuration float64 `json:"cycleDuration"`

	CycleCooldownTime float64 `json:"cycleCooldownTime"`

	UpcomingCycleCount float64 `json:"upcomingCycleCount"`

	CycleIssueAutoAssignStarted bool `json:"cycleIssueAutoAssignStarted"`

	CycleIssueAutoAssignCompleted bool `json:"cycleIssueAutoAssignCompleted"`

	CycleLockToActive bool `json:"cycleLockToActive"`

	IssueEstimationType string `json:"issueEstimationType"`

	IssueEstimationAllowZero bool `json:"issueEstimationAllowZero"`

	IssueEstimationExtended bool `json:"issueEstimationExtended"`

	DefaultIssueEstimate float64 `json:"defaultIssueEstimate"`

	AiThreadSummariesEnabled bool `json:"aiThreadSummariesEnabled"`
}

func (v *updateTeamTeamUpdateTeamPayloadTeam) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateTeamTeamUpdateTeamPayloadTeam) __premarshalJSON() (*__premarshalupdateTeamTeamUpdateTeamPayloadTeam, error) {
	var retval __premarshalupdateTeamTeamUpdateTeamPayloadTeam

	retval.Id = v.Team.Id
	retval.Name = v.Team.Name
	retval.Key = v.Team.Key
	retval.Private = v.Team.Private
	retval.Description = v.Team.Description
	retval.Icon = v.Team.Icon
	retval.Color = v.Team.Color
	retval.Timezone = v.Team.Timezone
	retval.GroupIssueHistory = v.Team.GroupIssueHistory
	retval.SetIssueSortOrderOnStateChange = v.Team.SetIssueSortOrderOnStateChange
	retval.AutoArchivePeriod = v.Team.AutoArchivePeriod
	retval.AutoClosePeriod = v.Team.AutoClosePeriod
	retval.TriageEnabled = v.Team.TriageEnabled
	retval.RequirePriorityToLeaveTriage = v.Team.RequirePriorityToLeaveTriage
	retval.CyclesEnabled = v.Team.CyclesEnabled
	retval.CycleStartDay = v.Team.CycleStartDay
	retval.CycleDuration = v.Team.CycleDuration
	retval.CycleCooldownTime = v.Team.CycleCooldownTime
	retval.UpcomingCycleCount = v.Team.UpcomingCycleCount
	retval.CycleIssueAutoAssignStarted = v.Team.CycleIssueAutoAssignStarted
	retval.CycleIssueAutoAssignCompleted = v.Team.CycleIssueAutoAssignCompleted
	retval.CycleLockToActive = v.Team.CycleLockToActive
	retval.IssueEstimationType = v.Team.IssueEstimationType
	retval.IssueEstimationAllowZero = v.Team.IssueEstimationAllowZero
	retval.IssueEstimationExtended = v.Team.IssueEstimationExtended
	retval.DefaultIssueEstimate = v.Team.DefaultIssueEstimate
	retval.AiThreadSummariesEnabled = v.Team.AiThreadSummariesEnabled
	return &retval, nil
}

// updateWorkflowStateResponse is returned by updateWorkflowState on success.
type updateWorkflowStateResponse struct {
	// Updates a state.
	WorkflowStateUpdate updateWorkflowStateWorkflowStateUpdateWorkflowStatePayload `json:"workflowStateUpdate"`
}

// GetWorkflowStateUpdate returns updateWorkflowStateResponse.WorkflowStateUpdate, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateResponse) GetWorkflowStateUpdate() updateWorkflowStateWorkflowStateUpdateWorkflowStatePayload {
	return v.WorkflowStateUpdate
}

// updateWorkflowStateWorkflowStateUpdateWorkflowStatePayload includes the requested fields of the GraphQL type WorkflowStatePayload.
type updateWorkflowStateWorkflowStateUpdateWorkflowStatePayload struct {
	// The state that was created or updated.
	WorkflowState updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState `json:"workflowState"`
}

// GetWorkflowState returns updateWorkflowStateWorkflowStateUpdateWorkflowStatePayload.WorkflowState, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayload) GetWorkflowState() updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState {
	return v.WorkflowState
}

// updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState struct {
	WorkflowState `json:"-"`
}

// GetId returns updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState) GetId() string {
	return v.WorkflowState.Id
}

// GetName returns updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState.Name, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState) GetName() string {
	return v.WorkflowState.Name
}

// GetColor returns updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState.Color, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState) GetColor() string {
	return v.WorkflowState.Color
}

// GetDescription returns updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState.Description, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState) GetDescription() *string {
	return v.WorkflowState.Description
}

// GetType returns updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState.Type, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState) GetType() string {
	return v.WorkflowState.Type
}

// GetPosition returns updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState.Position, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState) GetPosition() float64 {
	return v.WorkflowState.Position
}

// GetTeam returns updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState.Team, and is useful for accessing the field via an interface.
func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState) GetTeam() WorkflowStateTeam {
	return v.WorkflowState.Team
}

func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState
		graphql.NoUnmarshalJSON
	}
	firstPass.updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowState)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Color string `json:"color"`

	Description *string `json:"description"`

	Type string `json:"type"`

	Position float64 `json:"position"`

	Team WorkflowStateTeam `json:"team"`
}

func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState) __premarshalJSON() (*__premarshalupdateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState, error) {
	var retval __premarshalupdateWorkflowStateWorkflowStateUpdateWorkflowStatePayloadWorkflowState

	retval.Id = v.WorkflowState.Id
	retval.Name = v.WorkflowState.Name
	retval.Color = v.WorkflowState.Color
	retval.Description = v.WorkflowState.Description
	retval.Type = v.WorkflowState.Type
	retval.Position = v.WorkflowState.Position
	retval.Team = v.WorkflowState.Team
	return &retval, nil
}

// updateWorkspaceSettingsOrganizationUpdateOrganizationPayload includes the requested fields of the GraphQL type OrganizationPayload.
type updateWorkspaceSettingsOrganizationUpdateOrganizationPayload struct {
	// The organization that was created or updated.
	Organization updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization `json:"organization"`
}

// GetOrganization returns updateWorkspaceSettingsOrganizationUpdateOrganizationPayload.Organization, and is useful for accessing the field via an interface.
func (v *updateWorkspaceSettingsOrganizationUpdateOrganizationPayload) GetOrganization() updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization {
	return v.Organization
}

// updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An organization. Organizations are root-level objects that contain user accounts and teams.
type updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization struct {
	Organization `json:"-"`
}

// GetId returns updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization.Id, and is useful for accessing the field via an interface.
func (v *updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization) GetId() string {
	return v.Organization.Id
}

// GetAllowMembersToInvite returns updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization.AllowMembersToInvite, and is useful for accessing the field via an interface.
func (v *updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization) GetAllowMembersToInvite() bool {
	return v.Organization.AllowMembersToInvite
}

// GetRoadmapEnabled returns updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization.RoadmapEnabled, and is useful for accessing the field via an interface.
func (v *updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization) GetRoadmapEnabled() bool {
	return v.Organization.RoadmapEnabled
}

// GetGitLinkbackMessagesEnabled returns updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization.GitLinkbackMessagesEnabled, and is useful for accessing the field via an interface.
func (v *updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization) GetGitLinkbackMessagesEnabled() bool {
	return v.Organization.GitLinkbackMessagesEnabled
}

// GetGitPublicLinkbackMessagesEnabled returns updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization.GitPublicLinkbackMessagesEnabled, and is useful for accessing the field via an interface.
func (v *updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization) GetGitPublicLinkbackMessagesEnabled() bool {
	return v.Organization.GitPublicLinkbackMessagesEnabled
}

func (v *updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization
		graphql.NoUnmarshalJSON
	}
	firstPass.updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Organization)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization struct {
	Id string `json:"id"`

	AllowMembersToInvite bool `json:"allowMembersToInvite"`

	RoadmapEnabled bool `json:"roadmapEnabled"`

	GitLinkbackMessagesEnabled bool `json:"gitLinkbackMessagesEnabled"`

	GitPublicLinkbackMessagesEnabled bool `json:"gitPublicLinkbackMessagesEnabled"`
}

func (v *updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization) __premarshalJSON() (*__premarshalupdateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization, error) {
	var retval __premarshalupdateWorkspaceSettingsOrganizationUpdateOrganizationPayloadOrganization

	retval.Id = v.Organization.Id
	retval.AllowMembersToInvite = v.Organization.AllowMembersToInvite
	retval.RoadmapEnabled = v.Organization.RoadmapEnabled
	retval.GitLinkbackMessagesEnabled = v.Organization.GitLinkbackMessagesEnabled
	retval.GitPublicLinkbackMessagesEnabled = v.Organization.GitPublicLinkbackMessagesEnabled
	return &retval, nil
}

// updateWorkspaceSettingsResponse is returned by updateWorkspaceSettings on success.
type updateWorkspaceSettingsResponse struct {
	// Updates the user's organization.
	OrganizationUpdate updateWorkspaceSettingsOrganizationUpdateOrganizationPayload `json:"organizationUpdate"`
}

// GetOrganizationUpdate returns updateWorkspaceSettingsResponse.OrganizationUpdate, and is useful for accessing the field via an interface.
func (v *updateWorkspaceSettingsResponse) GetOrganizationUpdate() updateWorkspaceSettingsOrganizationUpdateOrganizationPayload {
	return v.OrganizationUpdate
}

func createGitAutomationState(
	ctx context.Context,
	client graphql.Client,
	input GitAutomationStateCreateInput,
) (*createGitAutomationStateResponse, error) {
	req := &graphql.Request{
		OpName: "createGitAutomationState",
		Query: `
mutation createGitAutomationState ($input: GitAutomationStateCreateInput!) {
	gitAutomationStateCreate(input: $input) {
		success
	}
}
`,
		Variables: &__createGitAutomationStateInput{
			Input: input,
		},
	}
	var err error

	var data createGitAutomationStateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createLabel(
	ctx context.Context,
	client graphql.Client,
	input IssueLabelCreateInput,
) (*createLabelResponse, error) {
	req := &graphql.Request{
		OpName: "createLabel",
		Query: `
mutation createLabel ($input: IssueLabelCreateInput!) {
	issueLabelCreate(input: $input) {
		issueLabel {
			... IssueLabel
		}
	}
}
fragment IssueLabel on IssueLabel {
	id
	name
	description
	color
	parent {
		id
	}
	team {
		id
	}
}
`,
		Variables: &__createLabelInput{
			Input: input,
		},
	}
	var err error

	var data createLabelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createTeam(
	ctx context.Context,
	client graphql.Client,
	input TeamCreateInput,
) (*createTeamResponse, error) {
	req := &graphql.Request{
		OpName: "createTeam",
		Query: `
mutation createTeam ($input: TeamCreateInput!) {
	teamCreate(input: $input) {
		team {
			... Team
		}
	}
}
fragment Team on Team {
	id
	name
	key
	private
	description
	icon
	color
	timezone
	groupIssueHistory
	setIssueSortOrderOnStateChange
	autoArchivePeriod
	autoClosePeriod
	triageEnabled
	requirePriorityToLeaveTriage
	cyclesEnabled
	cycleStartDay
	cycleDuration
	cycleCooldownTime
	upcomingCycleCount
	cycleIssueAutoAssignStarted
	cycleIssueAutoAssignCompleted
	cycleLockToActive
	issueEstimationType
	issueEstimationAllowZero
	issueEstimationExtended
	defaultIssueEstimate
	aiThreadSummariesEnabled
}
`,
		Variables: &__createTeamInput{
			Input: input,
		},
	}
	var err error

	var data createTeamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createWorkflowState(
	ctx context.Context,
	client graphql.Client,
	input WorkflowStateCreateInput,
) (*createWorkflowStateResponse, error) {
	req := &graphql.Request{
		OpName: "createWorkflowState",
		Query: `
mutation createWorkflowState ($input: WorkflowStateCreateInput!) {
	workflowStateCreate(input: $input) {
		workflowState {
			... WorkflowState
		}
	}
}
fragment WorkflowState on WorkflowState {
	id
	name
	color
	description
	type
	position
	team {
		id
	}
}
`,
		Variables: &__createWorkflowStateInput{
			Input: input,
		},
	}
	var err error

	var data createWorkflowStateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteGitAutomationState(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteGitAutomationStateResponse, error) {
	req := &graphql.Request{
		OpName: "deleteGitAutomationState",
		Query: `
mutation deleteGitAutomationState ($id: String!) {
	gitAutomationStateDelete(id: $id) {
		success
	}
}
`,
		Variables: &__deleteGitAutomationStateInput{
			Id: id,
		},
	}
	var err error

	var data deleteGitAutomationStateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteLabel(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteLabelResponse, error) {
	req := &graphql.Request{
		OpName: "deleteLabel",
		Query: `
mutation deleteLabel ($id: String!) {
	issueLabelDelete(id: $id) {
		success
	}
}
`,
		Variables: &__deleteLabelInput{
			Id: id,
		},
	}
	var err error

	var data deleteLabelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteTeam(
	ctx context.Context,
	client graphql.Client,
	key string,
) (*deleteTeamResponse, error) {
	req := &graphql.Request{
		OpName: "deleteTeam",
		Query: `
mutation deleteTeam ($key: String!) {
	teamDelete(id: $key) {
		success
	}
}
`,
		Variables: &__deleteTeamInput{
			Key: key,
		},
	}
	var err error

	var data deleteTeamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteWorkflowState(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteWorkflowStateResponse, error) {
	req := &graphql.Request{
		OpName: "deleteWorkflowState",
		Query: `
mutation deleteWorkflowState ($id: String!) {
	workflowStateArchive(id: $id) {
		success
	}
}
`,
		Variables: &__deleteWorkflowStateInput{
			Id: id,
		},
	}
	var err error

	var data deleteWorkflowStateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func findTeamLabel(
	ctx context.Context,
	client graphql.Client,
	name string,
	key string,
) (*findTeamLabelResponse, error) {
	req := &graphql.Request{
		OpName: "findTeamLabel",
		Query: `
query findTeamLabel ($name: String!, $key: String!) {
	issueLabels(filter: {name:{eq:$name},team:{key:{eq:$key}}}) {
		nodes {
			id
		}
	}
}
`,
		Variables: &__findTeamLabelInput{
			Name: name,
			Key:  key,
		},
	}
	var err error

	var data findTeamLabelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func findWorkflowState(
	ctx context.Context,
	client graphql.Client,
	name string,
	key string,
) (*findWorkflowStateResponse, error) {
	req := &graphql.Request{
		OpName: "findWorkflowState",
		Query: `
query findWorkflowState ($name: String!, $key: String!) {
	workflowStates(filter: {name:{eq:$name},team:{key:{eq:$key}}}) {
		nodes {
			id
		}
	}
}
`,
		Variables: &__findWorkflowStateInput{
			Name: name,
			Key:  key,
		},
	}
	var err error

	var data findWorkflowStateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func findWorkspaceLabel(
	ctx context.Context,
	client graphql.Client,
	name string,
) (*findWorkspaceLabelResponse, error) {
	req := &graphql.Request{
		OpName: "findWorkspaceLabel",
		Query: `
query findWorkspaceLabel ($name: String!) {
	issueLabels(filter: {name:{eq:$name}}) {
		nodes {
			id
			team {
				id
			}
		}
	}
}
`,
		Variables: &__findWorkspaceLabelInput{
			Name: name,
		},
	}
	var err error

	var data findWorkspaceLabelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getLabel(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getLabelResponse, error) {
	req := &graphql.Request{
		OpName: "getLabel",
		Query: `
query getLabel ($id: String!) {
	issueLabel(id: $id) {
		... IssueLabel
	}
}
fragment IssueLabel on IssueLabel {
	id
	name
	description
	color
	parent {
		id
	}
	team {
		id
	}
}
`,
		Variables: &__getLabelInput{
			Id: id,
		},
	}
	var err error

	var data getLabelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getTeam(
	ctx context.Context,
	client graphql.Client,
	key string,
) (*getTeamResponse, error) {
	req := &graphql.Request{
		OpName: "getTeam",
		Query: `
query getTeam ($key: String!) {
	team(id: $key) {
		... Team
	}
}
fragment Team on Team {
	id
	name
	key
	private
	description
	icon
	color
	timezone
	groupIssueHistory
	setIssueSortOrderOnStateChange
	autoArchivePeriod
	autoClosePeriod
	triageEnabled
	requirePriorityToLeaveTriage
	cyclesEnabled
	cycleStartDay
	cycleDuration
	cycleCooldownTime
	upcomingCycleCount
	cycleIssueAutoAssignStarted
	cycleIssueAutoAssignCompleted
	cycleLockToActive
	issueEstimationType
	issueEstimationAllowZero
	issueEstimationExtended
	defaultIssueEstimate
	aiThreadSummariesEnabled
}
`,
		Variables: &__getTeamInput{
			Key: key,
		},
	}
	var err error

	var data getTeamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getTeamWorkflow(
	ctx context.Context,
	client graphql.Client,
	key string,
) (*getTeamWorkflowResponse, error) {
	req := &graphql.Request{
		OpName: "getTeamWorkflow",
		Query: `
query getTeamWorkflow ($key: String!) {
	team(id: $key) {
		... TeamWorkflow
	}
}
fragment TeamWorkflow on Team {
	id
	key
	gitAutomationStates {
		nodes {
			id
			state {
				id
			}
			event
			targetBranch {
				branchPattern
				isRegex
			}
		}
	}
}
`,
		Variables: &__getTeamWorkflowInput{
			Key: key,
		},
	}
	var err error

	var data getTeamWorkflowResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getTeamWorkflowStates(
	ctx context.Context,
	client graphql.Client,
	key string,
) (*getTeamWorkflowStatesResponse, error) {
	req := &graphql.Request{
		OpName: "getTeamWorkflowStates",
		Query: `
query getTeamWorkflowStates ($key: String!) {
	workflowStates(filter: {team:{key:{eq:$key}}}) {
		nodes {
			... WorkflowState
		}
	}
}
fragment WorkflowState on WorkflowState {
	id
	name
	color
	description
	type
	position
	team {
		id
	}
}
`,
		Variables: &__getTeamWorkflowStatesInput{
			Key: key,
		},
	}
	var err error

	var data getTeamWorkflowStatesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getWorkflowState(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getWorkflowStateResponse, error) {
	req := &graphql.Request{
		OpName: "getWorkflowState",
		Query: `
query getWorkflowState ($id: String!) {
	workflowState(id: $id) {
		... WorkflowState
	}
}
fragment WorkflowState on WorkflowState {
	id
	name
	color
	description
	type
	position
	team {
		id
	}
}
`,
		Variables: &__getWorkflowStateInput{
			Id: id,
		},
	}
	var err error

	var data getWorkflowStateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getWorkspace(
	ctx context.Context,
	client graphql.Client,
) (*getWorkspaceResponse, error) {
	req := &graphql.Request{
		OpName: "getWorkspace",
		Query: `
query getWorkspace {
	organization {
		id
		urlKey
		name
	}
}
`,
	}
	var err error

	var data getWorkspaceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getWorkspaceSettings(
	ctx context.Context,
	client graphql.Client,
) (*getWorkspaceSettingsResponse, error) {
	req := &graphql.Request{
		OpName: "getWorkspaceSettings",
		Query: `
query getWorkspaceSettings {
	organization {
		... Organization
	}
}
fragment Organization on Organization {
	id
	allowMembersToInvite
	roadmapEnabled
	gitLinkbackMessagesEnabled
	gitPublicLinkbackMessagesEnabled
}
`,
	}
	var err error

	var data getWorkspaceSettingsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateGitAutomationState(
	ctx context.Context,
	client graphql.Client,
	id string,
	input GitAutomationStateUpdateInput,
) (*updateGitAutomationStateResponse, error) {
	req := &graphql.Request{
		OpName: "updateGitAutomationState",
		Query: `
mutation updateGitAutomationState ($id: String!, $input: GitAutomationStateUpdateInput!) {
	gitAutomationStateUpdate(id: $id, input: $input) {
		success
	}
}
`,
		Variables: &__updateGitAutomationStateInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data updateGitAutomationStateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateLabel(
	ctx context.Context,
	client graphql.Client,
	input IssueLabelUpdateInput,
	id string,
) (*updateLabelResponse, error) {
	req := &graphql.Request{
		OpName: "updateLabel",
		Query: `
mutation updateLabel ($input: IssueLabelUpdateInput!, $id: String!) {
	issueLabelUpdate(input: $input, id: $id) {
		issueLabel {
			... IssueLabel
		}
	}
}
fragment IssueLabel on IssueLabel {
	id
	name
	description
	color
	parent {
		id
	}
	team {
		id
	}
}
`,
		Variables: &__updateLabelInput{
			Input: input,
			Id:    id,
		},
	}
	var err error

	var data updateLabelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateTeam(
	ctx context.Context,
	client graphql.Client,
	input TeamUpdateInput,
	id string,
) (*updateTeamResponse, error) {
	req := &graphql.Request{
		OpName: "updateTeam",
		Query: `
mutation updateTeam ($input: TeamUpdateInput!, $id: String!) {
	teamUpdate(input: $input, id: $id) {
		team {
			... Team
		}
	}
}
fragment Team on Team {
	id
	name
	key
	private
	description
	icon
	color
	timezone
	groupIssueHistory
	setIssueSortOrderOnStateChange
	autoArchivePeriod
	autoClosePeriod
	triageEnabled
	requirePriorityToLeaveTriage
	cyclesEnabled
	cycleStartDay
	cycleDuration
	cycleCooldownTime
	upcomingCycleCount
	cycleIssueAutoAssignStarted
	cycleIssueAutoAssignCompleted
	cycleLockToActive
	issueEstimationType
	issueEstimationAllowZero
	issueEstimationExtended
	defaultIssueEstimate
	aiThreadSummariesEnabled
}
`,
		Variables: &__updateTeamInput{
			Input: input,
			Id:    id,
		},
	}
	var err error

	var data updateTeamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateWorkflowState(
	ctx context.Context,
	client graphql.Client,
	input WorkflowStateUpdateInput,
	id string,
) (*updateWorkflowStateResponse, error) {
	req := &graphql.Request{
		OpName: "updateWorkflowState",
		Query: `
mutation updateWorkflowState ($input: WorkflowStateUpdateInput!, $id: String!) {
	workflowStateUpdate(input: $input, id: $id) {
		workflowState {
			... WorkflowState
		}
	}
}
fragment WorkflowState on WorkflowState {
	id
	name
	color
	description
	type
	position
	team {
		id
	}
}
`,
		Variables: &__updateWorkflowStateInput{
			Input: input,
			Id:    id,
		},
	}
	var err error

	var data updateWorkflowStateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateWorkspaceSettings(
	ctx context.Context,
	client graphql.Client,
	input OrganizationUpdateInput,
) (*updateWorkspaceSettingsResponse, error) {
	req := &graphql.Request{
		OpName: "updateWorkspaceSettings",
		Query: `
mutation updateWorkspaceSettings ($input: OrganizationUpdateInput!) {
	organizationUpdate(input: $input) {
		organization {
			... Organization
		}
	}
}
fragment Organization on Organization {
	id
	allowMembersToInvite
	roadmapEnabled
	gitLinkbackMessagesEnabled
	gitPublicLinkbackMessagesEnabled
}
`,
		Variables: &__updateWorkspaceSettingsInput{
			Input: input,
		},
	}
	var err error

	var data updateWorkspaceSettingsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
